{
  "optimisation›proper tail calls (tail call optimisation)›direct recursion": "/*\n        \"use strict\";\n        return (function f(n){\n          if (n <= 0) {\nreturn  \"foo\";\n          }\n          return f(n - 1);\n        }(1e6)) === \"foo\";\n      */",
  "optimisation›proper tail calls (tail call optimisation)›mutual recursion": "/*\n        \"use strict\";\n        function f(n){\n          if (n <= 0) {\nreturn  \"foo\";\n          }\n          return g(n - 1);\n        }\n        function g(n){\n          if (n <= 0) {\nreturn  \"bar\";\n          }\n          return f(n - 1);\n        }\n        return f(1e6) === \"foo\" && f(1e6+1) === \"bar\";\n      */",
  "syntax›default function parameters›basic functionality": "/*\n        return (function (a = 1, b = 2) { return a === 3 && b === 2; }(3));\n      */",
  "syntax›default function parameters›explicit undefined defers to the default": "/*\n        return (function (a = 1, b = 2) { return a === 1 && b === 3; }(undefined, 3));\n      */",
  "syntax›default function parameters›defaults can refer to previous params": "/*\n        return (function (a, b = a) { return b === 5; }(5));\n      */",
  "syntax›default function parameters›arguments object interaction": "/*\n        return (function (a = \"baz\", b = \"qux\", c = \"quux\") {\n          a = \"corge\";\n          // The arguments object is not mapped to the\n          // parameters, even outside of strict mode.\n          return arguments.length === 2\n&& arguments[0] === \"foo\"\n&& arguments[1] === \"bar\";\n        }(\"foo\", \"bar\"));\n      */",
  "syntax›default function parameters›temporal dead zone": "/*\n        return (function(x = 1) {\n          try {\neval(\"(function(a=a){}())\");\nreturn false;\n          } catch(e) {}\n          try {\neval(\"(function(a=b,b){}())\");\nreturn false;\n          } catch(e) {}\n          return true;\n        }());\n      */",
  "syntax›default function parameters›separate scope": "/*\n        return (function(a=function(){\n          return typeof b === 'undefined';\n        }){\n          var b = 1;\n          return a();\n        }());\n      */",
  "syntax›default function parameters›new Function() support": "/*\n        return new Function(\"a = 1\", \"b = 2\",\n          \"return a === 3 && b === 2;\"\n        )(3);\n      */",
  "syntax›rest parameters›basic functionality": "/*\n        return (function (foo, ...args) {\n          return args instanceof Array && args + \"\" === \"bar,baz\";\n        }(\"foo\", \"bar\", \"baz\"));\n      */",
  "syntax›rest parameters›function 'length' property": "/*\n        return function(a, ...b){}.length === 1 && function(...c){}.length === 0;\n      */",
  "syntax›rest parameters›arguments object interaction": "/*\n        return (function (foo, ...args) {\n          foo = \"qux\";\n          // The arguments object is not mapped to the\n          // parameters, even outside of strict mode.\n          return arguments.length === 3\n&& arguments[0] === \"foo\"\n&& arguments[1] === \"bar\"\n&& arguments[2] === \"baz\";\n        }(\"foo\", \"bar\", \"baz\"));\n      */",
  "syntax›rest parameters›can't be used in setters": "/*\n        return (function (...args) {\n          try {\neval(\"({set e(...args){}})\");\n          } catch(e) {\nreturn true;\n          }\n        }());\n      */",
  "syntax›rest parameters›new Function() support": "/*\n        return new Function(\"a\", \"...b\",\n          \"return b instanceof Array && a+b === 'foobar,baz';\"\n        )('foo','bar','baz');\n      */",
  "syntax›spread (...) operator›with arrays, in function calls": "/*\n        return Math.max(...[1, 2, 3]) === 3\n      */",
  "syntax›spread (...) operator›with arrays, in array literals": "/*\n       return [...[1, 2, 3]][2] === 3;\n      */",
  "syntax›spread (...) operator›with sparse arrays, in function calls": "/*\n        var a = Array(...[,,]);\n        return \"0\" in a && \"1\" in a && '' + a[0] + a[1] === \"undefinedundefined\";\n      */",
  "syntax›spread (...) operator›with sparse arrays, in array literals": "/*\n        var a = [...[,,]];\n        return \"0\" in a && \"1\" in a && '' + a[0] + a[1] === \"undefinedundefined\";\n      */",
  "syntax›spread (...) operator›with strings, in function calls": "/*\n       return Math.max(...\"1234\") === 4;\n      */",
  "syntax›spread (...) operator›with strings, in array literals": "/*\n       return [\"a\", ...\"bcd\", \"e\"][3] === \"d\";\n      */",
  "syntax›spread (...) operator›with astral plane strings, in function calls": "/*\n       return Array(...\"𠮷𠮶\")[0] === \"𠮷\";\n      */",
  "syntax›spread (...) operator›with astral plane strings, in array literals": "/*\n       return [...\"𠮷𠮶\"][0] === \"𠮷\";\n      */",
  "syntax›spread (...) operator›with generator instances, in calls": "/*\n        var iterable = (function*(){ yield 1; yield 2; yield 3; }());\n        return Math.max(...iterable) === 3;\n      */",
  "syntax›spread (...) operator›with generator instances, in arrays": "/*\n        var iterable = (function*(){ yield \"b\"; yield \"c\"; yield \"d\"; }());\n        return [\"a\", ...iterable, \"e\"][3] === \"d\";\n      */",
  "syntax›spread (...) operator›with generic iterables, in calls": "/*\n        var iterable = global.__createIterableObject([1, 2, 3]);\n        return Math.max(...iterable) === 3;\n      */",
  "syntax›spread (...) operator›with generic iterables, in arrays": "/*\n        var iterable = global.__createIterableObject([\"b\", \"c\", \"d\"]);\n        return [\"a\", ...iterable, \"e\"][3] === \"d\";\n      */",
  "syntax›spread (...) operator›with instances of iterables, in calls": "/*\n        var iterable = global.__createIterableObject([1, 2, 3]);\n        return Math.max(...Object.create(iterable)) === 3;\n      */",
  "syntax›spread (...) operator›with instances of iterables, in arrays": "/*\n        var iterable = global.__createIterableObject([\"b\", \"c\", \"d\"]);\n        return [\"a\", ...Object.create(iterable), \"e\"][3] === \"d\";\n      */",
  "syntax›spread (...) operator›spreading non-iterables is a runtime error": "/*\n        try {\n          Math.max(...2);\n        } catch(e) {\n          return Math.max(...[1, 2, 3]) === 3;\n        }\n      */",
  "syntax›object literal extensions›computed properties": "/*\n        var x = 'y';\n        return ({ [x]: 1 }).y === 1;\n      */",
  "syntax›object literal extensions›shorthand properties": "/*\n        var a = 7, b = 8, c = {a,b};\n        return c.a === 7 && c.b === 8;\n      */",
  "syntax›object literal extensions›shorthand methods": "/*\n        return ({ y() { return 2; } }).y() === 2;\n      */",
  "syntax›object literal extensions›string-keyed shorthand methods": "/*\n        return ({ \"foo bar\"() { return 4; } })[\"foo bar\"]() === 4;\n      */",
  "syntax›object literal extensions›computed shorthand methods": "/*\n        var x = 'y';\n        return ({ [x](){ return 1 } }).y() === 1;\n      */",
  "syntax›object literal extensions›computed accessors": "/*\n        var x = 'y',\nvalueSet,\nobj = {\n  get [x] () { return 1 },\n  set [x] (value) { valueSet = value }\n};\n        obj.y = 'foo';\n        return obj.y === 1 && valueSet === 'foo';\n      */",
  "syntax›for..of loops›with arrays": "/*\n        var arr = [5];\n        for (var item of arr)\n          return item === 5;\n      */",
  "syntax›for..of loops›with sparse arrays": "/*\n        var arr = [,,];\n        var count = 0;\n        for (var item of arr)\n          count += (item === undefined);\n        return count === 2;\n      */",
  "syntax›for..of loops›with strings": "/*\n        var str = \"\";\n        for (var item of \"foo\")\n          str += item;\n        return str === \"foo\";\n      */",
  "syntax›for..of loops›with astral plane strings": "/*\n        var str = \"\";\n        for (var item of \"𠮷𠮶\")\n          str += item + \" \";\n        return str === \"𠮷 𠮶 \";\n      */",
  "syntax›for..of loops›with generator instances": "/*\n        var result = \"\";\n        var iterable = (function*(){ yield 1; yield 2; yield 3; }());\n        for (var item of iterable) {\n          result += item;\n        }\n        return result === \"123\";\n      */",
  "syntax›for..of loops›with generic iterables": "/*\n        var result = \"\";\n        var iterable = global.__createIterableObject([1, 2, 3]);\n        for (var item of iterable) {\n          result += item;\n        }\n        return result === \"123\";\n      */",
  "syntax›for..of loops›with instances of generic iterables": "/*\n        var result = \"\";\n        var iterable = global.__createIterableObject([1, 2, 3]);\n        for (var item of Object.create(iterable)) {\n          result += item;\n        }\n        return result === \"123\";\n      */",
  "syntax›for..of loops›iterator closing, break": "/*\n        var closed = false;\n        var iter = __createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        for (var it of iter) break;\n        return closed;\n      */",
  "syntax›for..of loops›iterator closing, throw": "/*\n        var closed = false;\n        var iter = __createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        try {\n          for (var it of iter) throw 0;\n        } catch(e){}\n        return closed;\n      */",
  "syntax›octal and binary literals›octal literals": "/*\n        return 0o10 === 8 && 0O10 === 8;\n      */",
  "syntax›octal and binary literals›binary literals": "/*\n        return 0b10 === 2 && 0B10 === 2;\n      */",
  "syntax›octal and binary literals›octal supported by Number()": "/*\n        return Number('0o1') === 1;\n      */",
  "syntax›octal and binary literals›binary supported by Number()": "/*\n        return Number('0b1') === 1;\n      */",
  "syntax›template literals›basic functionality": "/*\n        var a = \"ba\", b = \"QUX\";\n        return `foo bar\n        ${a + \"z\"} ${b.toLowerCase()}` === \"foo bar\\nbaz qux\";\n      */",
  "syntax›template literals›toString conversion": "/*\n        var a = {\n          toString: function() { return \"foo\"; },\n          valueOf: function() { return \"bar\"; },\n        };\n        return `${a}` === \"foo\";\n      */",
  "syntax›template literals›tagged template literals": "/*\n        var called = false;\n        function fn(parts, a, b) {\n          called = true;\n          return parts instanceof Array &&\nparts[0]     === \"foo\"      &&\nparts[1]     === \"bar\\n\"    &&\nparts.raw[0] === \"foo\"      &&\nparts.raw[1] === \"bar\\\\n\"   &&\na === 123                   &&\nb === 456;\n        }\n        return fn `foo${123}bar\\n${456}` && called;\n      */",
  "syntax›template literals›passed array is frozen": "/*\n        return (function(parts) {\n          return Object.isFrozen(parts) && Object.isFrozen(parts.raw);\n        }) `foo${0}bar${0}baz`;\n      */",
  "syntax›template literals›line break normalisation": "/*\n        var cr   = eval(\"`x\" + String.fromCharCode(13)    + \"y`\");\n        var lf   = eval(\"`x\" + String.fromCharCode(10)    + \"y`\");\n        var crlf = eval(\"`x\" + String.fromCharCode(13,10) + \"y`\");\n\n        return cr.length === 3 && lf.length === 3 && crlf.length === 3\n          && cr[1] === lf[1] && lf[1] === crlf[1] && crlf[1] === '\\n';\n      */",
  "syntax›RegExp \"y\" and \"u\" flags›\"y\" flag": "/*\n        var re = new RegExp('\\\\w', 'y');\n        re.exec('xy');\n        return (re.exec('xy')[0] === 'y');\n      */",
  "syntax›RegExp \"y\" and \"u\" flags›\"y\" flag, lastIndex": "/*\n        var re = new RegExp('yy', 'y');\n        re.lastIndex = 3;\n        var result = re.exec('xxxyyxx')[0];\n        return result === 'yy' && re.lastIndex === 5;\n      */",
  "syntax›RegExp \"y\" and \"u\" flags›\"u\" flag": "/*\n        return \"𠮷\".match(/^.$/u)[0].length === 2;\n      */",
  "syntax›RegExp \"y\" and \"u\" flags›\"u\" flag, Unicode code point escapes": "/*\n        return \"𝌆\".match(/\\u{1d306}/u)[0].length === 2;\n      */",
  "syntax›RegExp \"y\" and \"u\" flags›\"u\" flag, case folding": "/*\n        return \"ſ\".match(/S/iu) && \"ſ\".match(/\\w/iu) && \"ſ\".match(/\\W/iu)\n         && \"S\".match(/ſ/iu) && \"S\".match(/\\w/iu) && \"S\".match(/\\W/iu);\n      */",
  "syntax›destructuring, declarations›with arrays": "/*\n        var [a, , [b], c] = [5, null, [6]];\n        return a === 5 && b === 6 && c === undefined;\n      */",
  "syntax›destructuring, declarations›with sparse arrays": "/*\n        var [a, , b] = [,,,];\n        return a === undefined && b === undefined;\n      */",
  "syntax›destructuring, declarations›with strings": "/*\n        var [a, b, c] = \"ab\";\n        return a === \"a\" && b === \"b\" && c === undefined;\n      */",
  "syntax›destructuring, declarations›with astral plane strings": "/*\n        var [c] = \"𠮷𠮶\";\n        return c === \"𠮷\";\n      */",
  "syntax›destructuring, declarations›with generator instances": "/*\n        var [a, b, c] = (function*(){ yield 1; yield 2; }());\n        return a === 1 && b === 2 && c === undefined;\n      */",
  "syntax›destructuring, declarations›with generic iterables": "/*\n        var [a, b, c] = global.__createIterableObject([1, 2]);\n        return a === 1 && b === 2 && c === undefined;\n      */",
  "syntax›destructuring, declarations›with instances of generic iterables": "/*\n        var [a, b, c] = Object.create(global.__createIterableObject([1, 2]));\n        return a === 1 && b === 2 && c === undefined;\n      */",
  "syntax›destructuring, declarations›iterator closing": "/*\n        var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        var [a, b] = iter;\n        return closed;\n      */",
  "syntax›destructuring, declarations›trailing commas in iterable patterns": "/*\n        var [a,] = [1];\n        return a === 1;\n      */",
  "syntax›destructuring, declarations›with objects": "/*\n        var {c, x:d, e} = {c:7, x:8};\n        return c === 7 && d === 8 && e === undefined;\n      */",
  "syntax›destructuring, declarations›object destructuring with primitives": "/*\n        var {toFixed} = 2;\n        var {slice} = '';\n        return toFixed === Number.prototype.toFixed\n          && slice === String.prototype.slice;\n      */",
  "syntax›destructuring, declarations›trailing commas in object patterns": "/*\n        var {a,} = {a:1};\n        return a === 1;\n      */",
  "syntax›destructuring, declarations›throws on null and undefined": "/*\n        try {\n          var {a} = null;\n          return false;\n        } catch(e) {}\n        try {\n          var {b} = undefined;\n          return false;\n        } catch(e) {}\n        return true;\n      */",
  "syntax›destructuring, declarations›computed properties": "/*\n        var qux = \"corge\";\n        var { [qux]: grault } = { corge: \"garply\" };\n        return grault === \"garply\";\n      */",
  "syntax›destructuring, declarations›multiples in a single var statement": "/*\n        var [a,b] = [5,6], {c,d} = {c:7,d:8};\n        return a === 5 && b === 6 && c === 7 && d === 8;\n      */",
  "syntax›destructuring, declarations›nested": "/*\n        var [e, {x:f, g}] = [9, {x:10}];\n        var {h, x:[i]} = {h:11, x:[12]};\n        return e === 9 && f === 10 && g === undefined\n          && h === 11 && i === 12;\n      */",
  "syntax›destructuring, declarations›in for-in loop heads": "/*\n        for(var [i, j, k] in { qux: 1 }) {\n          return i === \"q\" && j === \"u\" && k === \"x\";\n        }\n      */",
  "syntax›destructuring, declarations›in for-of loop heads": "/*\n        for(var [i, j, k] of [[1,2,3]]) {\n          return i === 1 && j === 2 && k === 3;\n        }\n      */",
  "syntax›destructuring, declarations›in catch heads": "/*\n        try {\n          throw [1,2];\n        } catch([i,j]) {\n          try {\nthrow { k: 3, l: 4 };\n          } catch({k, l}) {\nreturn i === 1 && j === 2 && k === 3 && l === 4;\n          }\n        }\n      */",
  "syntax›destructuring, declarations›rest": "/*\n        var [a, ...b] = [3, 4, 5];\n        var [c, ...d] = [6];\n        return a === 3 && b instanceof Array && (b + \"\") === \"4,5\" &&\n           c === 6 && d instanceof Array && d.length === 0;\n      */",
  "syntax›destructuring, declarations›defaults": "/*\n        var {a = 1, b = 0, z:c = 3} = {b:2, z:undefined};\n        var [d = 0, e = 5, f = 6] = [4,,undefined];\n        return a === 1 && b === 2 && c === 3\n          && d === 4 && e === 5 && f === 6;\n      */",
  "syntax›destructuring, declarations›defaults, let temporal dead zone": "/*\n        var {a, b = 2} = {a:1};\n        try {\n          eval(\"let {c = c} = {};\");\n          return false;\n        } catch(e){}\n        try {\n          eval(\"let {c = d, d} = {d:1};\");\n          return false;\n        } catch(e){}\n        return a === 1 && b === 2;\n      */",
  "syntax›destructuring, assignment›with arrays": "/*\n        var a,b,c;\n        [a, , [b], c] = [5, null, [6]];\n        return a === 5 && b === 6 && c === undefined;\n      */",
  "syntax›destructuring, assignment›with sparse arrays": "/*\n        var a, b;\n        [a, , b] = [,,,];\n        return a === undefined && b === undefined;\n      */",
  "syntax›destructuring, assignment›with strings": "/*\n        var a,b,c;\n        [a, b, c] = \"ab\";\n        return a === \"a\" && b === \"b\" && c === undefined;\n      */",
  "syntax›destructuring, assignment›with astral plane strings": "/*\n        var c;\n        [c] = \"𠮷𠮶\";\n        return c === \"𠮷\";\n      */",
  "syntax›destructuring, assignment›with generator instances": "/*\n        var a,b,c;\n        [a, b, c] = (function*(){ yield 1; yield 2; }());\n        return a === 1 && b === 2 && c === undefined;\n      */",
  "syntax›destructuring, assignment›with generic iterables": "/*\n        var a,b,c;\n        [a, b, c] = global.__createIterableObject([1, 2]);\n        return a === 1 && b === 2 && c === undefined;\n      */",
  "syntax›destructuring, assignment›with instances of generic iterables": "/*\n        var a,b,c;\n        [a, b, c] = Object.create(global.__createIterableObject([1, 2]));\n        return a === 1 && b === 2 && c === undefined;\n      */",
  "syntax›destructuring, assignment›iterator closing": "/*\n        var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        var a,b;\n        [a, b] = iter;\n        return closed;\n      */",
  "syntax›destructuring, assignment›iterable destructuring expression": "/*\n        var a, b, iterable = [1,2];\n        return ([a, b] = iterable) === iterable;\n      */",
  "syntax›destructuring, assignment›chained iterable destructuring": "/*\n        var a,b,c,d;\n        [a,b] = [c,d] = [1,2];\n        return a === 1 && b === 2 && c === 1 && d === 2;\n      */",
  "syntax›destructuring, assignment›trailing commas in iterable patterns": "/*\n        var a;\n        [a,] = [1];\n        return a === 1;\n      */",
  "syntax›destructuring, assignment›with objects": "/*\n        var c,d,e;\n        ({c, x:d, e} = {c:7, x:8});\n        return c === 7 && d === 8 && e === undefined;\n      */",
  "syntax›destructuring, assignment›object destructuring with primitives": "/*\n        var toFixed, slice;\n        ({toFixed} = 2);\n        ({slice} = '');\n        return toFixed === Number.prototype.toFixed\n          && slice === String.prototype.slice;\n      */",
  "syntax›destructuring, assignment›trailing commas in object patterns": "/*\n        var a;\n        ({a,} = {a:1});\n        return a === 1;\n      */",
  "syntax›destructuring, assignment›object destructuring expression": "/*\n        var a, b, obj = { a:1, b:2 };\n        return ({a,b} = obj) === obj;\n      */",
  "syntax›destructuring, assignment›parenthesised left-hand-side is a syntax error": "/*\n        var a, b;\n        ({a,b} = {a:1,b:2});\n        try {\n          eval(\"({a,b}) = {a:3,b:4};\");\n        }\n        catch(e) {\n          return a === 1 && b === 2;\n        }\n      */",
  "syntax›destructuring, assignment›chained object destructuring": "/*\n        var a,b,c,d;\n        ({a,b} = {c,d} = {a:1,b:2,c:3,d:4});\n        return a === 1 && b === 2 && c === 3 && d === 4;\n      */",
  "syntax›destructuring, assignment›throws on null and undefined": "/*\n        var a,b;\n        try {\n          ({a} = null);\n          return false;\n        } catch(e) {}\n        try {\n          ({b} = undefined);\n          return false;\n        } catch(e) {}\n        return true;\n      */",
  "syntax›destructuring, assignment›computed properties": "/*\n        var grault, qux = \"corge\";\n        ({ [qux]: grault } = { corge: \"garply\" });\n        return grault === \"garply\";\n      */",
  "syntax›destructuring, assignment›nested": "/*\n        var e,f,g,h,i;\n        [e, {x:f, g}] = [9, {x:10}];\n        ({h, x:[i]} = {h:11, x:[12]});\n        return e === 9 && f === 10 && g === undefined\n          && h === 11 && i === 12;\n      */",
  "syntax›destructuring, assignment›rest": "/*\n        var a,b,c,d;\n        [a, ...b] = [3, 4, 5];\n        [c, ...d] = [6];\n        return a === 3 && b instanceof Array && (b + \"\") === \"4,5\" &&\n           c === 6 && d instanceof Array && d.length === 0;\n      */",
  "syntax›destructuring, assignment›nested rest": "/*\n        var a = [1, 2, 3], first, last;\n        [first, ...[a[2], last]] = a;\n        return first === 1 && last === 3 && (a + \"\") === \"1,2,2\";\n      */",
  "syntax›destructuring, assignment›empty patterns": "/*\n        [] = [1,2];\n        ({} = {a:1,b:2});\n        return true;\n      */",
  "syntax›destructuring, assignment›defaults": "/*\n        var a,b,c,d,e,f;\n        ({a = 1, b = 0, z:c = 3} = {b:2, z:undefined});\n        [d = 0, e = 5, f = 6] = [4,,undefined];\n        return a === 1 && b === 2 && c === 3\n          && d === 4 && e === 5 && f === 6;\n      */",
  "syntax›destructuring, parameters›with arrays": "/*\n        return function([a, , [b], c]) {\n          return a === 5 && b === 6 && c === undefined;\n        }([5, null, [6]]);\n      */",
  "syntax›destructuring, parameters›with sparse arrays": "/*\n        return function([a, , b]) {\n          return a === undefined && b === undefined;\n        }([,,,]);\n      */",
  "syntax›destructuring, parameters›with strings": "/*\n        return function([a, b, c]) {\n          return a === \"a\" && b === \"b\" && c === undefined;\n        }(\"ab\");\n      */",
  "syntax›destructuring, parameters›with astral plane strings": "/*\n        return function([c]) {\n          return c === \"𠮷\";\n        }(\"𠮷𠮶\");\n      */",
  "syntax›destructuring, parameters›with generator instances": "/*\n        return function([a, b, c]) {\n          return a === 1 && b === 2 && c === undefined;\n        }(function*(){ yield 1; yield 2; }());\n      */",
  "syntax›destructuring, parameters›with generic iterables": "/*\n        return function([a, b, c]) {\n          return a === 1 && b === 2 && c === undefined;\n        }(global.__createIterableObject([1, 2]));\n      */",
  "syntax›destructuring, parameters›with instances of generic iterables": "/*\n        return function([a, b, c]) {\n          return a === 1 && b === 2 && c === undefined;\n        }(Object.create(global.__createIterableObject([1, 2])));\n      */",
  "syntax›destructuring, parameters›iterator closing": "/*\n        var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        (function([a,b]) {}(iter));\n        return closed;\n      */",
  "syntax›destructuring, parameters›trailing commas in iterable patterns": "/*\n        return function([a,]) {\n          return a === 1;\n        }([1]);\n      */",
  "syntax›destructuring, parameters›with objects": "/*\n        return function({c, x:d, e}) {\n          return c === 7 && d === 8 && e === undefined;\n        }({c:7, x:8});\n      */",
  "syntax›destructuring, parameters›object destructuring with primitives": "/*\n        return function({toFixed}, {slice}) {\n          return toFixed === Number.prototype.toFixed\n&& slice === String.prototype.slice;\n        }(2,'');\n      */",
  "syntax›destructuring, parameters›trailing commas in object patterns": "/*\n        return function({a,}) {\n          return a === 1;\n        }({a:1});\n      */",
  "syntax›destructuring, parameters›throws on null and undefined": "/*\n        try {\n          (function({a}){}(null));\n          return false;\n        } catch(e) {}\n        try {\n          (function({b}){}(undefined));\n          return false;\n        } catch(e) {}\n        return true;\n      */",
  "syntax›destructuring, parameters›computed properties": "/*\n        var qux = \"corge\";\n        return function({ [qux]: grault }) {\n          return grault === \"garply\";\n        }({ corge: \"garply\" });\n      */",
  "syntax›destructuring, parameters›nested": "/*\n        return function([e, {x:f, g}], {h, x:[i]}) {\n          return e === 9 && f === 10 && g === undefined\n&& h === 11 && i === 12;\n        }([9, {x:10}],{h:11, x:[12]});\n      */",
  "syntax›destructuring, parameters›'arguments' interaction": "/*\n        return (function({a, x:b, y:e}, [c, d]) {\n          return arguments[0].a === 1 && arguments[0].x === 2\n&& !(\"y\" in arguments[0]) && arguments[1] + '' === \"3,4\";\n        }({a:1, x:2}, [3, 4]));\n      */",
  "syntax›destructuring, parameters›new Function() support": "/*\n        return new Function(\"{a, x:b, y:e}\",\"[c, d]\",\n          \"return a === 1 && b === 2 && c === 3 && \"\n          + \"d === 4 && e === undefined;\"\n        )({a:1, x:2}, [3, 4]);\n      */",
  "syntax›destructuring, parameters›in parameters, function 'length' property": "/*\n        return function({a, b}, [c, d]){}.length === 2;\n      */",
  "syntax›destructuring, parameters›rest": "/*\n        return function([a, ...b], [c, ...d]) {\n          return a === 3 && b instanceof Array && (b + \"\") === \"4,5\" &&\n c === 6 && d instanceof Array && d.length === 0;\n        }([3, 4, 5], [6]);\n      */",
  "syntax›destructuring, parameters›empty patterns": "/*\n        return function ([],{}){\n          return arguments[0] + '' === \"3,4\" && arguments[1].x === \"foo\";\n        }([3,4],{x:\"foo\"});\n      */",
  "syntax›destructuring, parameters›defaults": "/*\n        return (function({a = 1, b = 0, c = 3, x:d = 0, y:e = 5},\n[f = 6, g = 0, h = 8]) {\n          return a === 1 && b === 2 && c === 3 && d === 4 &&\ne === 5 && f === 6 && g === 7 && h === 8;\n        }({b:2, c:undefined, x:4},[, 7, undefined]));\n      */",
  "syntax›destructuring, parameters›defaults, separate scope": "/*\n        return (function({a=function(){\n          return typeof b === 'undefined';\n        }}){\n          var b = 1;\n          return a();\n        }({}));\n      */",
  "syntax›destructuring, parameters›defaults, new Function() support": "/*\n        return new Function(\"{a = 1, b = 0, c = 3, x:d = 0, y:e = 5}\",\n          \"return a === 1 && b === 2 && c === 3 && d === 4 && e === 5;\"\n        )({b:2, c:undefined, x:4});\n      */",
  "syntax›Unicode code point escapes›in strings": "/*\n        return '\\u{1d306}' == '\\ud834\\udf06';\n      */",
  "syntax›Unicode code point escapes›in identifiers": "/*\n        var \\u{102C0} = { \\u{102C0} : 2 };\n        return \\u{102C0}['\\ud800\\udec0'] === 2;\n      */",
  "syntax›new.target›in constructors": "/*\n        var passed = false;\n        new function f() {\n          passed = (new.target === f);\n        }();\n        (function() {\n          passed &= (new.target === undefined);\n        }());\n        return passed;\n      */",
  "syntax›new.target›assignment is an early error": "/*\n        var passed = false;\n        new function f() {\n          passed = (new.target === f);\n        }();\n\n        try {\n          Function(\"new.target = function(){};\");\n        } catch(e) {\n          return passed;\n        }\n      */",
  "bindings›const›basic support": "/*\n        const foo = 123;\n        return (foo === 123);\n      */",
  "bindings›const›is block-scoped": "/*\n        const bar = 123;\n        { const bar = 456; }\n        return bar === 123;\n      */",
  "bindings›const›cannot be in statements": "/*\n        const bar = 1;\n        try {\n          Function(\"if(true) const baz = 1;\")();\n        } catch(e) {\n          return true;\n        }\n      */",
  "bindings›const›redefining a const is an error": "/*\n        const baz = 1;\n        try {\n          Function(\"const foo = 1; foo = 2;\")();\n        } catch(e) {\n          return true;\n        }\n      */",
  "bindings›const›for loop statement scope": "/*\n       const baz = 1;\n       for(const baz = 0; false;) {}\n       return baz === 1;\n       */",
  "bindings›const›for-in loop iteration scope": "/*\n        var scopes = [];\n        for(const i in { a:1, b:1 }) {\n          scopes.push(function(){ return i; });\n        }\n        return (scopes[0]() === \"a\" && scopes[1]() === \"b\");\n      */",
  "bindings›const›for-of loop iteration scope": "/*\n        var scopes = [];\n        for(const i of ['a','b']) {\n          scopes.push(function(){ return i; });\n        }\n        return (scopes[0]() === \"a\" && scopes[1]() === \"b\");\n      */",
  "bindings›const›temporal dead zone": "/*\n        var passed = (function(){ try { qux; } catch(e) { return true; }}());\n        function fn() { passed &= qux === 456; }\n        const qux = 456;\n        fn();\n        return passed;\n      */",
  "bindings›const›basic support (strict mode)": "/*\n        \"use strict\";\n        const foo = 123;\n        return (foo === 123);\n      */",
  "bindings›const›is block-scoped (strict mode)": "/*\n        'use strict';\n        const bar = 123;\n        { const bar = 456; }\n        return bar === 123;\n      */",
  "bindings›const›cannot be in statements (strict mode)": "/*\n        'use strict';\n        const bar = 1;\n        try {\n          Function(\"'use strict'; if(true) const baz = 1;\")();\n        } catch(e) {\n          return true;\n        }\n      */",
  "bindings›const›redefining a const (strict mode)": "/*\n        'use strict';\n        const baz = 1;\n        try {\n          Function(\"'use strict'; const foo = 1; foo = 2;\")();\n        } catch(e) {\n          return true;\n        }\n      */",
  "bindings›const›for loop statement scope (strict mode)": "/*\n        'use strict';\n        const baz = 1;\n        for(const baz = 0; false;) {}\n        return baz === 1;\n      */",
  "bindings›const›for-in loop iteration scope (strict mode)": "/*\n        'use strict';\n        var scopes = [];\n        for(const i in { a:1, b:1 }) {\n          scopes.push(function(){ return i; });\n        }\n        return (scopes[0]() === \"a\" && scopes[1]() === \"b\");\n      */",
  "bindings›const›for-of loop iteration scope (strict mode)": "/*\n        'use strict';\n        var scopes = [];\n        for(const i of ['a','b']) {\n          scopes.push(function(){ return i; });\n        }\n        return (scopes[0]() === \"a\" && scopes[1]() === \"b\");\n      */",
  "bindings›const›temporal dead zone (strict mode)": "/*\n        'use strict';\n        var passed = (function(){ try { qux; } catch(e) { return true; }}());\n        function fn() { passed &= qux === 456; }\n        const qux = 456;\n        fn();\n        return passed;\n      */",
  "bindings›let›basic support": "/*\n        let foo = 123;\n        return (foo === 123);\n      */",
  "bindings›let›is block-scoped": "/*\n        let bar = 123;\n        { let bar = 456; }\n        return bar === 123;\n      */",
  "bindings›let›cannot be in statements": "/*\n        let bar = 1;\n        try {\n          Function(\"if(true) let baz = 1;\")();\n        } catch(e) {\n          return true;\n        }\n      */",
  "bindings›let›for loop statement scope": "/*\n        let baz = 1;\n        for(let baz = 0; false;) {}\n        return baz === 1;\n      */",
  "bindings›let›temporal dead zone": "/*\n        var passed = (function(){ try {  qux; } catch(e) { return true; }}());\n        function fn() { passed &= qux === 456; }\n        let qux = 456;\n        fn();\n        return passed;\n      */",
  "bindings›let›for/for-in loop iteration scope": "/*\n        let scopes = [];\n        for(let i = 0; i < 2; i++) {\n          scopes.push(function(){ return i; });\n        }\n        let passed = (scopes[0]() === 0 && scopes[1]() === 1);\n\n        scopes = [];\n        for(let i in { a:1, b:1 }) {\n          scopes.push(function(){ return i; });\n        }\n        passed &= (scopes[0]() === \"a\" && scopes[1]() === \"b\");\n        return passed;\n      */",
  "bindings›let›basic support (strict mode)": "/*\n        'use strict';\n        let foo = 123;\n        return (foo === 123);\n      */",
  "bindings›let›is block-scoped (strict mode)": "/*\n        'use strict';\n        let bar = 123;\n        { let bar = 456; }\n        return bar === 123;\n      */",
  "bindings›let›cannot be in statements (strict mode)": "/*\n        'use strict';\n        let bar = 1;\n        try {\n          Function(\"'use strict'; if(true) let baz = 1;\")();\n        } catch(e) {\n          return true;\n        }\n      */",
  "bindings›let›for loop statement scope (strict mode)": "/*\n        'use strict';\n        let baz = 1;\n        for(let baz = 0; false;) {}\n        return baz === 1;\n      */",
  "bindings›let›temporal dead zone (strict mode)": "/*\n        'use strict';\n        var passed = (function(){ try {  qux; } catch(e) { return true; }}());\n        function fn() { passed &= qux === 456; }\n        let qux = 456;\n        fn();\n        return passed;\n      */",
  "bindings›let›for/for-in loop iteration scope (strict mode)": "/*\n        'use strict';\n        let scopes = [];\n        for(let i = 0; i < 2; i++) {\n          scopes.push(function(){ return i; });\n        }\n        let passed = (scopes[0]() === 0 && scopes[1]() === 1);\n\n        scopes = [];\n        for(let i in { a:1, b:1 }) {\n          scopes.push(function(){ return i; });\n        }\n        passed &= (scopes[0]() === \"a\" && scopes[1]() === \"b\");\n        return passed;\n      */",
  "bindings›block-level function declaration": "/*\n    'use strict';\n    function f() { return 1; }\n    {\n      function f() { return 2; }\n    }\n    return f() === 1;\n  */",
  "functions›arrow functions›0 parameters": "/*\n        return (() => 5)() === 5;\n      */",
  "functions›arrow functions›1 parameter, no brackets": "/*\n        var b = x => x + \"foo\";\n        return (b(\"fee fie foe \") === \"fee fie foe foo\");\n      */",
  "functions›arrow functions›multiple parameters": "/*\n        var c = (v, w, x, y, z) => \"\" + v + w + x + y + z;\n        return (c(6, 5, 4, 3, 2) === \"65432\");\n      */",
  "functions›arrow functions›lexical \"this\" binding": "/*\n        var d = { x : \"bar\", y : function() { return z => this.x + z; }}.y();\n        var e = { x : \"baz\", y : d };\n        return d(\"ley\") === \"barley\" && e.y(\"ley\") === \"barley\";\n      */",
  "functions›arrow functions›\"this\" unchanged by call or apply": "/*\n        var d = { x : \"foo\", y : function() { return () => this.x; }};\n        var e = { x : \"bar\" };\n        return d.y().call(e) === \"foo\" && d.y().apply(e) === \"foo\";\n      */",
  "functions›arrow functions›can't be bound, can be curried": "/*\n        var d = { x : \"bar\", y : function() { return z => this.x + z; }};\n        var e = { x : \"baz\" };\n        return d.y().bind(e, \"ley\")() === \"barley\";\n      */",
  "functions›arrow functions›lexical \"arguments\" binding": "/*\n        var f = (function() { return z => arguments[0]; }(5));\n        return f(6) === 5;\n      */",
  "functions›arrow functions›no line break between params and <code>=></code>": "/*\n        return (() => {\n          try { Function(\"x\\n => 2\")(); } catch(e) { return true; }\n        })();\n      */",
  "functions›arrow functions›correct precedence": "/*\n        return (() => {\n          try { Function(\"0 || () => 2\")(); } catch(e) { return true; }\n        })();\n      */",
  "functions›arrow functions›no \"prototype\" property": "/*\n        var a = () => 5;\n        return !a.hasOwnProperty(\"prototype\");\n      */",
  "functions›arrow functions›lexical \"super\" binding in constructors": "/*\n        var received;\n\n        class B {\n          constructor (arg) {\nreceived = arg;\n          }\n        }\n        class C extends B {\n          constructor () {\nvar callSuper = () => super('foo');\ncallSuper();\n          }\n        }\n        return new C instanceof C && received === 'foo'\n      */",
  "functions›arrow functions›lexical \"super\" binding in methods": "/*\n        class B {\n          qux() {\nreturn \"quux\";\n          }\n        }\n        class C extends B {\n          baz() {\nreturn x => super.qux();\n          }\n        }\n        var arrow = new C().baz();\n        return arrow() === \"quux\";\n      */",
  "functions›arrow functions›lexical \"new.target\" binding": "/*\n        function C() {\n          return x => new.target;\n        }\n        return new C()() === C && C()() === undefined;\n      */",
  "functions›class›class statement": "/*\n        class C {}\n        return typeof C === \"function\";\n      */",
  "functions›class›is block-scoped": "/*\n        class C {}\n        var c1 = C;\n        {\n          class C {}\n          var c2 = C;\n        }\n        return C === c1;\n      */",
  "functions›class›class expression": "/*\n        return typeof class C {} === \"function\";\n      */",
  "functions›class›anonymous class": "/*\n        return typeof class {} === \"function\";\n      */",
  "functions›class›constructor": "/*\n        class C {\n          constructor() { this.x = 1; }\n        }\n        return C.prototype.constructor === C\n          && new C().x === 1;\n      */",
  "functions›class›prototype methods": "/*\n        class C {\n          method() { return 2; }\n        }\n        return typeof C.prototype.method === \"function\"\n          && new C().method() === 2;\n      */",
  "functions›class›string-keyed methods": "/*\n        class C {\n          \"foo bar\"() { return 2; }\n        }\n        return typeof C.prototype[\"foo bar\"] === \"function\"\n          && new C()[\"foo bar\"]() === 2;\n      */",
  "functions›class›computed prototype methods": "/*\n        var foo = \"method\";\n        class C {\n          [foo]() { return 2; }\n        }\n        return typeof C.prototype.method === \"function\"\n          && new C().method() === 2;\n      */",
  "functions›class›optional semicolons": "/*\n        class C {\n          ;\n          method() { return 2; };\n          method2() { return 2; }\n          method3() { return 2; };\n        }\n        return typeof C.prototype.method === \"function\"\n          && typeof C.prototype.method2 === \"function\"\n          && typeof C.prototype.method3 === \"function\";\n      */",
  "functions›class›static methods": "/*\n        class C {\n          static method() { return 3; }\n        }\n        return typeof C.method === \"function\"\n          && C.method() === 3;\n      */",
  "functions›class›computed static methods": "/*\n        var foo = \"method\";\n        class C {\n          static [foo]() { return 3; }\n        }\n        return typeof C.method === \"function\"\n          && C.method() === 3;\n      */",
  "functions›class›accessor properties": "/*\n        var baz = false;\n        class C {\n          get foo() { return \"foo\"; }\n          set bar(x) { baz = x; }\n        }\n        new C().bar = true;\n        return new C().foo === \"foo\" && baz;\n      */",
  "functions›class›computed accessor properties": "/*\n        var garply = \"foo\", grault = \"bar\", baz = false;\n        class C {\n          get [garply]() { return \"foo\"; }\n          set [grault](x) { baz = x; }\n        }\n        new C().bar = true;\n        return new C().foo === \"foo\" && baz;\n      */",
  "functions›class›static accessor properties": "/*\n        var baz = false;\n        class C {\n          static get foo() { return \"foo\"; }\n          static set bar(x) { baz = x; }\n        }\n        C.bar = true;\n        return C.foo === \"foo\" && baz;\n      */",
  "functions›class›computed static accessor properties": "/*\n        var garply = \"foo\", grault = \"bar\", baz = false;\n        class C {\n          static get [garply]() { return \"foo\"; }\n          static set [grault](x) { baz = x; }\n        }\n        C.bar = true;\n        return C.foo === \"foo\" && baz;\n      */",
  "functions›class›class name is lexically scoped": "/*\n        class C {\n          method() { return typeof C === \"function\"; }\n        }\n        var M = C.prototype.method;\n        C = undefined;\n        return C === undefined && M();\n      */",
  "functions›class›computed names, temporal dead zone": "/*\n        try {\n          var B = class C {\n[C](){}\n          }\n        } catch(e) {\n          return true;\n        }\n      */",
  "functions›class›methods aren't enumerable": "/*\n        class C {\n          foo() {}\n          static bar() {}\n        }\n        return !C.prototype.propertyIsEnumerable(\"foo\") && !C.propertyIsEnumerable(\"bar\");\n      */",
  "functions›class›implicit strict mode": "/*\n        class C {\n          static method() { return this === undefined; }\n        }\n        return (0,C.method)();\n      */",
  "functions›class›constructor requires new": "/*\n        class C {}\n        try {\n          C();\n        }\n        catch(e) {\n          return true;\n        }\n      */",
  "functions›class›extends": "/*\n        class B {}\n        class C extends B {}\n        return new C() instanceof B\n          && B.isPrototypeOf(C);\n      */",
  "functions›class›extends expressions": "/*\n        var B;\n        class C extends (B = class {}) {}\n        return new C() instanceof B\n          && B.isPrototypeOf(C);\n      */",
  "functions›class›extends null": "/*\n        class C extends null {\n          constructor() { return Object.create(null); }\n        }\n        return Function.prototype.isPrototypeOf(C)\n          && Object.getPrototypeOf(C.prototype) === null;\n      */",
  "functions›class›new.target": "/*\n        var passed = false;\n        new function f() {\n          passed = new.target === f;\n        }();\n\n        class A {\n          constructor() {\npassed &= new.target === B;\n          }\n        }\n        class B extends A {}\n        new B();\n        return passed;\n      */",
  "functions›super›statement in constructors": "/*\n        var passed = false;\n        class B {\n          constructor(a) { passed = (a === \"barbaz\"); }\n        }\n        class C extends B {\n          constructor(a) { super(\"bar\" + a); }\n        }\n        new C(\"baz\");\n        return passed;\n      */",
  "functions›super›expression in constructors": "/*\n        class B {\n          constructor(a) { return [\"foo\" + a]; }\n        }\n        class C extends B {\n          constructor(a) { return super(\"bar\" + a); }\n        }\n        return new C(\"baz\")[0] === \"foobarbaz\";\n      */",
  "functions›super›in methods, property access": "/*\n        class B {}\n        B.prototype.qux = \"foo\";\n        B.prototype.corge = \"baz\";\n        class C extends B {\n          quux(a) { return super.qux + a + super[\"corge\"]; }\n        }\n        C.prototype.qux = \"garply\";\n        return new C().quux(\"bar\") === \"foobarbaz\";\n      */",
  "functions›super›in methods, method calls": "/*\n        class B {\n          qux(a) { return \"foo\" + a; }\n        }\n        class C extends B {\n          qux(a) { return super.qux(\"bar\" + a); }\n        }\n        return new C().qux(\"baz\") === \"foobarbaz\";\n      */",
  "functions›super›method calls use correct \"this\" binding": "/*\n        class B {\n          qux(a) { return this.foo + a; }\n        }\n        class C extends B {\n          qux(a) { return super.qux(\"bar\" + a); }\n        }\n        var obj = new C();\n        obj.foo = \"foo\";\n        return obj.qux(\"baz\") === \"foobarbaz\";\n      */",
  "functions›super›constructor calls use correct \"new.target\" binding": "/*\n        var passed;\n        class B {\n          constructor() { passed = (new.target === C); }\n        }\n        class C extends B {\n          constructor() { super(); }\n        }\n        new C();\n        return passed;\n      */",
  "functions›super›is statically bound": "/*\n        class B {\n          qux() { return \"bar\"; }\n        }\n        class C extends B {\n          qux() { return super.qux() + this.corge; }\n        }\n        var obj = {\n          qux: C.prototype.qux,\n          corge: \"ley\"\n        };\n        return obj.qux() === \"barley\";\n      */",
  "functions›super›super() invokes the correct constructor": "/*\n        // checks that super() is *not* a synonym of super.constructor()\n        var passed;\n        class B {\nconstructor() {\n    passed = true;\n}\n        };\n        B.prototype.constructor = function () {\npassed = false;\n        };\n        class C extends B { };\n        new C;\n        return passed;\n      */",
  "functions›generators›basic functionality": "/*\n        function * generator(){\n          yield 5; yield 6;\n        };\n        var iterator = generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›generator function expressions": "/*\n        var generator = function * (){\n          yield 5; yield 6;\n        };\n        var iterator = generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›correct \"this\" binding": "/*\n        function * generator(){\n          yield this.x; yield this.y;\n        };\n        var iterator = { g: generator, x: 5, y: 6 }.g();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›can't use \"this\" with new": "/*\n        function * generator(){\n          yield this.x; yield this.y;\n        };\n        try {\n          (new generator()).next();\n        }\n        catch (e) {\n          return true;\n        }\n      */",
  "functions›generators›sending": "/*\n        var sent;\n        function * generator(){\n          sent = [yield 5, yield 6];\n        };\n        var iterator = generator();\n        iterator.next();\n        iterator.next(\"foo\");\n        iterator.next(\"bar\");\n        return sent[0] === \"foo\" && sent[1] === \"bar\";\n      */",
  "functions›generators›%GeneratorPrototype%": "/*\n        function * generatorFn(){}\n        var ownProto = Object.getPrototypeOf(generatorFn());\n        var passed = ownProto === generatorFn.prototype;\n\n        var sharedProto = Object.getPrototypeOf(ownProto);\n        passed &= sharedProto !== Object.prototype &&\n          sharedProto === Object.getPrototypeOf(function*(){}.prototype) &&\n          sharedProto.hasOwnProperty('next');\n\n        return passed;\n      */",
  "functions›generators›%GeneratorPrototype% prototype chain": "/*\n        function * generatorFn(){}\n        var g = generatorFn();\n        var ownProto = Object.getPrototypeOf(g);\n        var passed = ownProto === generatorFn.prototype;\n\n        var sharedProto = Object.getPrototypeOf(ownProto);\n        var iterProto = Object.getPrototypeOf(sharedProto);\n\n        passed &= iterProto.hasOwnProperty(Symbol.iterator) &&\n          !sharedProto     .hasOwnProperty(Symbol.iterator) &&\n          !ownProto        .hasOwnProperty(Symbol.iterator) &&\n          g[Symbol.iterator]() === g;\n\n        return passed;\n      */",
  "functions›generators›%GeneratorPrototype%.constructor": "/*\n        function * g (){}\n        var iterator = new g.constructor(\"a\",\"b\",\"c\",\"yield a; yield b; yield c;\")(5,6,7);\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n\n        passed &= g.constructor === (function*(){}).constructor;\n        return passed;\n      */",
  "functions›generators›%GeneratorPrototype%.throw": "/*\n        var passed = false;\n        function * generator(){\n          try {\nyield 5; yield 6;\n          } catch(e) {\npassed = (e === \"foo\");\n          }\n        };\n        var iterator = generator();\n        iterator.next();\n        iterator.throw(\"foo\");\n        return passed;\n      */",
  "functions›generators›%GeneratorPrototype%.return": "/*\n        function * generator(){\n          yield 5; yield 6;\n        };\n        var iterator = generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.return(\"quxquux\");\n        passed    &= item.value === \"quxquux\" && item.done === true;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›yield operator precedence": "/*\n        var passed;\n        function * generator(){\n          passed = yield 0 ? true : false;\n        };\n        var iterator = generator();\n        iterator.next();\n        iterator.next(true);\n        return passed;\n      */",
  "functions›generators›yield *, arrays": "/*\n        var iterator = (function * generator() {\n          yield * [5, 6];\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›yield *, sparse arrays": "/*\n        var iterator = (function * generator() {\n          yield * [,,];\n        }());\n        var item = iterator.next();\n        var passed = item.value === undefined && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›yield *, strings": "/*\n        var iterator = (function * generator() {\n          yield * \"56\";\n        }());\n        var item = iterator.next();\n        var passed = item.value === \"5\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === \"6\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›yield *, astral plane strings": "/*\n        var iterator = (function * generator() {\n          yield * \"𠮷𠮶\";\n        }());\n        var item = iterator.next();\n        var passed = item.value === \"𠮷\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === \"𠮶\" && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›yield *, generator instances": "/*\n        var iterator = (function * generator() {\n          yield * (function*(){ yield 5; yield 6; yield 7; }());\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›yield *, generic iterables": "/*\n        var iterator = (function * generator() {\n          yield * global.__createIterableObject([5, 6, 7]);\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›yield *, instances of iterables": "/*\n        var iterator = (function * generator() {\n          yield * Object.create(__createIterableObject([5, 6, 7]));\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 7 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›yield * on non-iterables is a runtime error": "/*\n        var iterator = (function * generator() {\n          yield * [5];\n        }());\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        iterator = (function * generator() {\n          yield * 5;\n        }());\n        try {\n          iterator.next();\n        } catch (e) {\n          return passed;\n        }\n      */",
  "functions›generators›yield *, iterator closing": "/*\n        var closed = '';\n        var iter = __createIterableObject([1, 2, 3], {\n          'return': function(){\nclosed += 'a';\nreturn {done: true};\n          }\n        });\n        var gen = (function* generator(){\n          try {\nyield *iter;\n          } finally {\nclosed += 'b';\n          }\n        })();\n        gen.next();\n        gen['return']();\n        return closed === 'ab';\n      */",
  "functions›generators›yield *, iterator closing via throw()": "/*\n        var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'throw': undefined,\n          'return': function() {\nclosed = true;\nreturn {done: true};\n          }\n        });\n        var gen = (function*(){\n          try {\nyield *iter;\n          } catch(e){}\n        })();\n        gen.next();\n        gen['throw']();\n        return closed;\n      */",
  "functions›generators›shorthand generator methods": "/*\n        var o = {\n          * generator() {\nyield 5; yield 6;\n          },\n        };\n        var iterator = o.generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›string-keyed shorthand generator methods": "/*\n        var o = {\n          * \"foo bar\"() {\nyield 5; yield 6;\n          },\n        };\n        var iterator = o[\"foo bar\"]();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›computed shorthand generators": "/*\n        var garply = \"generator\";\n        var o = {\n          * [garply] () {\nyield 5; yield 6;\n          },\n        };\n        var iterator = o.generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›shorthand generator methods, classes": "/*\n        class C {\n          * generator() {\nyield 5; yield 6;\n          }\n        };\n        var iterator = new C().generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›computed shorthand generators, classes": "/*\n        var garply = \"generator\";\n        class C {\n          * [garply] () {\nyield 5; yield 6;\n          }\n        }\n        var iterator = new C().generator();\n        var item = iterator.next();\n        var passed = item.value === 5 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === 6 && item.done === false;\n        item = iterator.next();\n        passed    &= item.value === undefined && item.done === true;\n        return passed;\n      */",
  "functions›generators›shorthand generators can't be constructors": "/*\n        class C {\n          * generator() {\nyield 5; yield 6;\n          }\n        };\n        try {\n          Function(\"class D { * constructor() { return {}; } }\");\n        } catch(e) {\n          return true;\n        }\n      */",
  "built-ins›typed arrays›Int8Array": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new Int8Array(buffer);         view[0] = 0x80;\n        return view[0] === -0x80;\n      */",
  "built-ins›typed arrays›Uint8Array": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new Uint8Array(buffer);        view[0] = 0x100;\n        return view[0] === 0;\n      */",
  "built-ins›typed arrays›Uint8ClampedArray": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new Uint8ClampedArray(buffer); view[0] = 0x100;\n        return view[0] === 0xFF;\n      */",
  "built-ins›typed arrays›Int16Array": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new Int16Array(buffer);        view[0] = 0x8000;\n        return view[0] === -0x8000;\n      */",
  "built-ins›typed arrays›Uint16Array": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new Uint16Array(buffer);       view[0] = 0x10000;\n        return view[0] === 0;\n      */",
  "built-ins›typed arrays›Int32Array": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new Int32Array(buffer);        view[0] = 0x80000000;\n        return view[0] === -0x80000000;\n      */",
  "built-ins›typed arrays›Uint32Array": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new Uint32Array(buffer);       view[0] = 0x100000000;\n        return view[0] === 0;\n      */",
  "built-ins›typed arrays›Float32Array": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new Float32Array(buffer);       view[0] = 0.1;\n        return view[0] === 0.10000000149011612;\n      */",
  "built-ins›typed arrays›Float64Array": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new Float64Array(buffer);       view[0] = 0.1;\n        return view[0] === 0.1;\n      */",
  "built-ins›typed arrays›DataView (Int8)": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setInt8 (0, 0x80);\n        return view.getInt8(0) === -0x80;\n      */",
  "built-ins›typed arrays›DataView (Uint8)": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setUint8(0, 0x100);\n        return view.getUint8(0) === 0;\n      */",
  "built-ins›typed arrays›DataView (Int16)": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setInt16(0, 0x8000);\n        return view.getInt16(0) === -0x8000;\n      */",
  "built-ins›typed arrays›DataView (Uint16)": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setUint16(0, 0x10000);\n        return view.getUint16(0) === 0;\n      */",
  "built-ins›typed arrays›DataView (Int32)": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setInt32(0, 0x80000000);\n        return view.getInt32(0) === -0x80000000;\n      */",
  "built-ins›typed arrays›DataView (Uint32)": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setUint32(0, 0x100000000);\n        return view.getUint32(0) === 0;\n      */",
  "built-ins›typed arrays›DataView (Float32)": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setFloat32(0, 0.1);\n        return view.getFloat32(0) === 0.10000000149011612;\n      */",
  "built-ins›typed arrays›DataView (Float64)": "/*\n        var buffer = new ArrayBuffer(64);\n        var view = new DataView(buffer);\n        view.setFloat64(0, 0.1);\n        return view.getFloat64(0) === 0.1;\n      */",
  "built-ins›typed arrays›ArrayBuffer[Symbol.species]": "/*\n        return typeof ArrayBuffer[Symbol.species] === 'function';\n      */",
  "built-ins›typed arrays›constructors require new": "/*\n        var buffer = new ArrayBuffer(64);\n        var constructors = [\n          'ArrayBuffer',\n          'DataView',\n          'Int8Array',\n          'Uint8Array',\n          'Uint8ClampedArray',\n          'Int16Array',\n          'Uint16Array',\n          'Int32Array',\n          'Uint32Array',\n          'Float32Array',\n          'Float64Array'\n        ];\n        return constructors.every(function (constructor) {\n          try {\nif (constructor in global) {\n  global[constructor](constructor === \"ArrayBuffer\" ? 64 : buffer);\n}\nreturn false;\n          } catch(e) {\nreturn true;\n          }\n        });\n      */",
  "built-ins›typed arrays›constructors accept generic iterables": "/*\n        var constructors = [\n          'Int8Array',\n          'Uint8Array',\n          'Uint8ClampedArray',\n          'Int16Array',\n          'Uint16Array',\n          'Int32Array',\n          'Uint32Array',\n          'Float32Array',\n          'Float64Array'\n        ];\n        for(var i = 0; i < constructors.length; i++){\n          var arr = new global[constructors[i]](__createIterableObject([1, 2, 3]));\n          if(arr.length !== 3 || arr[0] !== 1 || arr[1] !== 2 || arr[2] !== 3)return false;\n        }\n        return true;\n      */",
  "built-ins›typed arrays›correct prototype chains": "/*\n        var constructors = [\n          'Int8Array',\n          'Uint8Array',\n          'Uint8ClampedArray',\n          'Int16Array',\n          'Uint16Array',\n          'Int32Array',\n          'Uint32Array',\n          'Float32Array',\n          'Float64Array'\n        ];\n        var constructor = Object.getPrototypeOf(Int8Array);\n        var prototype = Object.getPrototypeOf(Int8Array.prototype);\n        if(constructor === Function.prototype || prototype === Object.prototype)return false;\n        for(var i = 0; i < constructors.length; i+=1) {\n          if (!(constructors[i] in global\n  && Object.getPrototypeOf(global[constructors[i]]) === constructor\n  && Object.getPrototypeOf(global[constructors[i]].prototype) === prototype\n  && Object.getOwnPropertyNames(global[constructors[i]].prototype).sort() + ''\n    === \"BYTES_PER_ELEMENT,constructor\")) {\nreturn false;\n          }\n        }\n        return true;\n      */",
  "built-ins›typed arrays›%TypedArray%.from": "return typeof Int8Array.from === \"function\" &&\ntypeof Uint8Array.from === \"function\" &&\ntypeof Uint8ClampedArray.from === \"function\" &&\ntypeof Int16Array.from === \"function\" &&\ntypeof Uint16Array.from === \"function\" &&\ntypeof Int32Array.from === \"function\" &&\ntypeof Uint32Array.from === \"function\" &&\ntypeof Float32Array.from === \"function\" &&\ntypeof Float64Array.from === \"function\";",
  "built-ins›typed arrays›%TypedArray%.of": "return typeof Int8Array.of === \"function\" &&\ntypeof Uint8Array.of === \"function\" &&\ntypeof Uint8ClampedArray.of === \"function\" &&\ntypeof Int16Array.of === \"function\" &&\ntypeof Uint16Array.of === \"function\" &&\ntypeof Int32Array.of === \"function\" &&\ntypeof Uint32Array.of === \"function\" &&\ntypeof Float32Array.of === \"function\" &&\ntypeof Float64Array.of === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.subarray": "return typeof Int8Array.prototype.subarray === \"function\" &&\ntypeof Uint8Array.prototype.subarray === \"function\" &&\ntypeof Uint8ClampedArray.prototype.subarray === \"function\" &&\ntypeof Int16Array.prototype.subarray === \"function\" &&\ntypeof Uint16Array.prototype.subarray === \"function\" &&\ntypeof Int32Array.prototype.subarray === \"function\" &&\ntypeof Uint32Array.prototype.subarray === \"function\" &&\ntypeof Float32Array.prototype.subarray === \"function\" &&\ntypeof Float64Array.prototype.subarray === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.join": "return typeof Int8Array.prototype.join === \"function\" &&\ntypeof Uint8Array.prototype.join === \"function\" &&\ntypeof Uint8ClampedArray.prototype.join === \"function\" &&\ntypeof Int16Array.prototype.join === \"function\" &&\ntypeof Uint16Array.prototype.join === \"function\" &&\ntypeof Int32Array.prototype.join === \"function\" &&\ntypeof Uint32Array.prototype.join === \"function\" &&\ntypeof Float32Array.prototype.join === \"function\" &&\ntypeof Float64Array.prototype.join === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.indexOf": "return typeof Int8Array.prototype.indexOf === \"function\" &&\ntypeof Uint8Array.prototype.indexOf === \"function\" &&\ntypeof Uint8ClampedArray.prototype.indexOf === \"function\" &&\ntypeof Int16Array.prototype.indexOf === \"function\" &&\ntypeof Uint16Array.prototype.indexOf === \"function\" &&\ntypeof Int32Array.prototype.indexOf === \"function\" &&\ntypeof Uint32Array.prototype.indexOf === \"function\" &&\ntypeof Float32Array.prototype.indexOf === \"function\" &&\ntypeof Float64Array.prototype.indexOf === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.lastIndexOf": "return typeof Int8Array.prototype.lastIndexOf === \"function\" &&\ntypeof Uint8Array.prototype.lastIndexOf === \"function\" &&\ntypeof Uint8ClampedArray.prototype.lastIndexOf === \"function\" &&\ntypeof Int16Array.prototype.lastIndexOf === \"function\" &&\ntypeof Uint16Array.prototype.lastIndexOf === \"function\" &&\ntypeof Int32Array.prototype.lastIndexOf === \"function\" &&\ntypeof Uint32Array.prototype.lastIndexOf === \"function\" &&\ntypeof Float32Array.prototype.lastIndexOf === \"function\" &&\ntypeof Float64Array.prototype.lastIndexOf === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.slice": "return typeof Int8Array.prototype.slice === \"function\" &&\ntypeof Uint8Array.prototype.slice === \"function\" &&\ntypeof Uint8ClampedArray.prototype.slice === \"function\" &&\ntypeof Int16Array.prototype.slice === \"function\" &&\ntypeof Uint16Array.prototype.slice === \"function\" &&\ntypeof Int32Array.prototype.slice === \"function\" &&\ntypeof Uint32Array.prototype.slice === \"function\" &&\ntypeof Float32Array.prototype.slice === \"function\" &&\ntypeof Float64Array.prototype.slice === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.every": "return typeof Int8Array.prototype.every === \"function\" &&\ntypeof Uint8Array.prototype.every === \"function\" &&\ntypeof Uint8ClampedArray.prototype.every === \"function\" &&\ntypeof Int16Array.prototype.every === \"function\" &&\ntypeof Uint16Array.prototype.every === \"function\" &&\ntypeof Int32Array.prototype.every === \"function\" &&\ntypeof Uint32Array.prototype.every === \"function\" &&\ntypeof Float32Array.prototype.every === \"function\" &&\ntypeof Float64Array.prototype.every === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.filter": "return typeof Int8Array.prototype.filter === \"function\" &&\ntypeof Uint8Array.prototype.filter === \"function\" &&\ntypeof Uint8ClampedArray.prototype.filter === \"function\" &&\ntypeof Int16Array.prototype.filter === \"function\" &&\ntypeof Uint16Array.prototype.filter === \"function\" &&\ntypeof Int32Array.prototype.filter === \"function\" &&\ntypeof Uint32Array.prototype.filter === \"function\" &&\ntypeof Float32Array.prototype.filter === \"function\" &&\ntypeof Float64Array.prototype.filter === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.forEach": "return typeof Int8Array.prototype.forEach === \"function\" &&\ntypeof Uint8Array.prototype.forEach === \"function\" &&\ntypeof Uint8ClampedArray.prototype.forEach === \"function\" &&\ntypeof Int16Array.prototype.forEach === \"function\" &&\ntypeof Uint16Array.prototype.forEach === \"function\" &&\ntypeof Int32Array.prototype.forEach === \"function\" &&\ntypeof Uint32Array.prototype.forEach === \"function\" &&\ntypeof Float32Array.prototype.forEach === \"function\" &&\ntypeof Float64Array.prototype.forEach === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.map": "return typeof Int8Array.prototype.map === \"function\" &&\ntypeof Uint8Array.prototype.map === \"function\" &&\ntypeof Uint8ClampedArray.prototype.map === \"function\" &&\ntypeof Int16Array.prototype.map === \"function\" &&\ntypeof Uint16Array.prototype.map === \"function\" &&\ntypeof Int32Array.prototype.map === \"function\" &&\ntypeof Uint32Array.prototype.map === \"function\" &&\ntypeof Float32Array.prototype.map === \"function\" &&\ntypeof Float64Array.prototype.map === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.reduce": "return typeof Int8Array.prototype.reduce === \"function\" &&\ntypeof Uint8Array.prototype.reduce === \"function\" &&\ntypeof Uint8ClampedArray.prototype.reduce === \"function\" &&\ntypeof Int16Array.prototype.reduce === \"function\" &&\ntypeof Uint16Array.prototype.reduce === \"function\" &&\ntypeof Int32Array.prototype.reduce === \"function\" &&\ntypeof Uint32Array.prototype.reduce === \"function\" &&\ntypeof Float32Array.prototype.reduce === \"function\" &&\ntypeof Float64Array.prototype.reduce === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.reduceRight": "return typeof Int8Array.prototype.reduceRight === \"function\" &&\ntypeof Uint8Array.prototype.reduceRight === \"function\" &&\ntypeof Uint8ClampedArray.prototype.reduceRight === \"function\" &&\ntypeof Int16Array.prototype.reduceRight === \"function\" &&\ntypeof Uint16Array.prototype.reduceRight === \"function\" &&\ntypeof Int32Array.prototype.reduceRight === \"function\" &&\ntypeof Uint32Array.prototype.reduceRight === \"function\" &&\ntypeof Float32Array.prototype.reduceRight === \"function\" &&\ntypeof Float64Array.prototype.reduceRight === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.reverse": "return typeof Int8Array.prototype.reverse === \"function\" &&\ntypeof Uint8Array.prototype.reverse === \"function\" &&\ntypeof Uint8ClampedArray.prototype.reverse === \"function\" &&\ntypeof Int16Array.prototype.reverse === \"function\" &&\ntypeof Uint16Array.prototype.reverse === \"function\" &&\ntypeof Int32Array.prototype.reverse === \"function\" &&\ntypeof Uint32Array.prototype.reverse === \"function\" &&\ntypeof Float32Array.prototype.reverse === \"function\" &&\ntypeof Float64Array.prototype.reverse === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.some": "return typeof Int8Array.prototype.some === \"function\" &&\ntypeof Uint8Array.prototype.some === \"function\" &&\ntypeof Uint8ClampedArray.prototype.some === \"function\" &&\ntypeof Int16Array.prototype.some === \"function\" &&\ntypeof Uint16Array.prototype.some === \"function\" &&\ntypeof Int32Array.prototype.some === \"function\" &&\ntypeof Uint32Array.prototype.some === \"function\" &&\ntypeof Float32Array.prototype.some === \"function\" &&\ntypeof Float64Array.prototype.some === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.sort": "return typeof Int8Array.prototype.sort === \"function\" &&\ntypeof Uint8Array.prototype.sort === \"function\" &&\ntypeof Uint8ClampedArray.prototype.sort === \"function\" &&\ntypeof Int16Array.prototype.sort === \"function\" &&\ntypeof Uint16Array.prototype.sort === \"function\" &&\ntypeof Int32Array.prototype.sort === \"function\" &&\ntypeof Uint32Array.prototype.sort === \"function\" &&\ntypeof Float32Array.prototype.sort === \"function\" &&\ntypeof Float64Array.prototype.sort === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.copyWithin": "return typeof Int8Array.prototype.copyWithin === \"function\" &&\ntypeof Uint8Array.prototype.copyWithin === \"function\" &&\ntypeof Uint8ClampedArray.prototype.copyWithin === \"function\" &&\ntypeof Int16Array.prototype.copyWithin === \"function\" &&\ntypeof Uint16Array.prototype.copyWithin === \"function\" &&\ntypeof Int32Array.prototype.copyWithin === \"function\" &&\ntypeof Uint32Array.prototype.copyWithin === \"function\" &&\ntypeof Float32Array.prototype.copyWithin === \"function\" &&\ntypeof Float64Array.prototype.copyWithin === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.find": "return typeof Int8Array.prototype.find === \"function\" &&\ntypeof Uint8Array.prototype.find === \"function\" &&\ntypeof Uint8ClampedArray.prototype.find === \"function\" &&\ntypeof Int16Array.prototype.find === \"function\" &&\ntypeof Uint16Array.prototype.find === \"function\" &&\ntypeof Int32Array.prototype.find === \"function\" &&\ntypeof Uint32Array.prototype.find === \"function\" &&\ntypeof Float32Array.prototype.find === \"function\" &&\ntypeof Float64Array.prototype.find === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.findIndex": "return typeof Int8Array.prototype.findIndex === \"function\" &&\ntypeof Uint8Array.prototype.findIndex === \"function\" &&\ntypeof Uint8ClampedArray.prototype.findIndex === \"function\" &&\ntypeof Int16Array.prototype.findIndex === \"function\" &&\ntypeof Uint16Array.prototype.findIndex === \"function\" &&\ntypeof Int32Array.prototype.findIndex === \"function\" &&\ntypeof Uint32Array.prototype.findIndex === \"function\" &&\ntypeof Float32Array.prototype.findIndex === \"function\" &&\ntypeof Float64Array.prototype.findIndex === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.fill": "return typeof Int8Array.prototype.fill === \"function\" &&\ntypeof Uint8Array.prototype.fill === \"function\" &&\ntypeof Uint8ClampedArray.prototype.fill === \"function\" &&\ntypeof Int16Array.prototype.fill === \"function\" &&\ntypeof Uint16Array.prototype.fill === \"function\" &&\ntypeof Int32Array.prototype.fill === \"function\" &&\ntypeof Uint32Array.prototype.fill === \"function\" &&\ntypeof Float32Array.prototype.fill === \"function\" &&\ntypeof Float64Array.prototype.fill === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.keys": "return typeof Int8Array.prototype.keys === \"function\" &&\ntypeof Uint8Array.prototype.keys === \"function\" &&\ntypeof Uint8ClampedArray.prototype.keys === \"function\" &&\ntypeof Int16Array.prototype.keys === \"function\" &&\ntypeof Uint16Array.prototype.keys === \"function\" &&\ntypeof Int32Array.prototype.keys === \"function\" &&\ntypeof Uint32Array.prototype.keys === \"function\" &&\ntypeof Float32Array.prototype.keys === \"function\" &&\ntypeof Float64Array.prototype.keys === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.values": "return typeof Int8Array.prototype.values === \"function\" &&\ntypeof Uint8Array.prototype.values === \"function\" &&\ntypeof Uint8ClampedArray.prototype.values === \"function\" &&\ntypeof Int16Array.prototype.values === \"function\" &&\ntypeof Uint16Array.prototype.values === \"function\" &&\ntypeof Int32Array.prototype.values === \"function\" &&\ntypeof Uint32Array.prototype.values === \"function\" &&\ntypeof Float32Array.prototype.values === \"function\" &&\ntypeof Float64Array.prototype.values === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype.entries": "return typeof Int8Array.prototype.entries === \"function\" &&\ntypeof Uint8Array.prototype.entries === \"function\" &&\ntypeof Uint8ClampedArray.prototype.entries === \"function\" &&\ntypeof Int16Array.prototype.entries === \"function\" &&\ntypeof Uint16Array.prototype.entries === \"function\" &&\ntypeof Int32Array.prototype.entries === \"function\" &&\ntypeof Uint32Array.prototype.entries === \"function\" &&\ntypeof Float32Array.prototype.entries === \"function\" &&\ntypeof Float64Array.prototype.entries === \"function\";",
  "built-ins›typed arrays›%TypedArray%.prototype[Symbol.iterator]": "return typeof Int8Array.prototype[Symbol.iterator] === \"function\" &&\ntypeof Uint8Array.prototype[Symbol.iterator] === \"function\" &&\ntypeof Uint8ClampedArray.prototype[Symbol.iterator] === \"function\" &&\ntypeof Int16Array.prototype[Symbol.iterator] === \"function\" &&\ntypeof Uint16Array.prototype[Symbol.iterator] === \"function\" &&\ntypeof Int32Array.prototype[Symbol.iterator] === \"function\" &&\ntypeof Uint32Array.prototype[Symbol.iterator] === \"function\" &&\ntypeof Float32Array.prototype[Symbol.iterator] === \"function\" &&\ntypeof Float64Array.prototype[Symbol.iterator] === \"function\";",
  "built-ins›typed arrays›%TypedArray%[Symbol.species]": "return typeof Int8Array[Symbol.species] === \"function\" &&\ntypeof Uint8Array[Symbol.species] === \"function\" &&\ntypeof Uint8ClampedArray[Symbol.species] === \"function\" &&\ntypeof Int16Array[Symbol.species] === \"function\" &&\ntypeof Uint16Array[Symbol.species] === \"function\" &&\ntypeof Int32Array[Symbol.species] === \"function\" &&\ntypeof Uint32Array[Symbol.species] === \"function\" &&\ntypeof Float32Array[Symbol.species] === \"function\" &&\ntypeof Float64Array[Symbol.species] === \"function\";",
  "built-ins›Map›basic functionality": "/*\n        var key = {};\n        var map = new Map();\n\n        map.set(key, 123);\n\n        return map.has(key) && map.get(key) === 123;\n      */",
  "built-ins›Map›constructor arguments": "/*\n        var key1 = {};\n        var key2 = {};\n        var map = new Map([[key1, 123], [key2, 456]]);\n\n        return map.has(key1) && map.get(key1) === 123 &&\n   map.has(key2) && map.get(key2) === 456;\n      */",
  "built-ins›Map›constructor requires new": "/*\n        new Map();\n        try {\n          Map();\n          return false;\n        } catch(e) {\n          return true;\n        }\n      */",
  "built-ins›Map›constructor accepts null": "/*\n        new Map(null);\n        return true;\n      */",
  "built-ins›Map›constructor invokes set": "/*\n        var passed = false;\n        var _set = Map.prototype.set;\n\n        Map.prototype.set = function(k, v) {\n          passed = true;\n        };\n\n        new Map([ [1, 2] ]);\n        Map.prototype.set = _set;\n\n        return passed;\n      */",
  "built-ins›Map›iterator closing": "/*\n        var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        try {\n          new Map(iter);\n        } catch(e){}\n        return closed;\n      */",
  "built-ins›Map›Map.prototype.set returns this": "/*\n        var map = new Map();\n        return map.set(0, 0) === map;\n      */",
  "built-ins›Map›-0 key converts to +0": "/*\n        var map = new Map();\n        map.set(-0, \"foo\");\n        var k;\n        map.forEach(function (value, key) {\n          k = 1 / key;\n        });\n        return k === Infinity && map.get(+0) == \"foo\";\n      */",
  "built-ins›Map›Map.prototype.size": "/*\n        var key = {};\n        var map = new Map();\n\n        map.set(key, 123);\n\n        return map.size === 1;\n      */",
  "built-ins›Map›Map.prototype.delete": "/*\n        return typeof Map.prototype.delete === \"function\";\n      */",
  "built-ins›Map›Map.prototype.clear": "/*\n        return typeof Map.prototype.clear === \"function\";\n      */",
  "built-ins›Map›Map.prototype.forEach": "/*\n        return typeof Map.prototype.forEach === \"function\";\n      */",
  "built-ins›Map›Map.prototype.keys": "/*\n        return typeof Map.prototype.keys === \"function\";\n      */",
  "built-ins›Map›Map.prototype.values": "/*\n        return typeof Map.prototype.values === \"function\";\n      */",
  "built-ins›Map›Map.prototype.entries": "/*\n        return typeof Map.prototype.entries === \"function\";\n      */",
  "built-ins›Map›Map.prototype[Symbol.iterator]": "/*\n        return typeof Map.prototype[Symbol.iterator] === \"function\";\n      */",
  "built-ins›Map›Map.prototype isn't an instance": "/*\n        new Map();\n        var obj = {};\n        try {\n          Map.prototype.has(obj);\n        }\n        catch(e) {\n          return true;\n        }\n      */",
  "built-ins›Map›Map iterator prototype chain": "/*\n        // Iterator instance\n        var iterator = new Map()[Symbol.iterator]();\n        // %MapIteratorPrototype%\n        var proto1 = Object.getPrototypeOf(iterator);\n        // %IteratorPrototype%\n        var proto2 = Object.getPrototypeOf(proto1);\n\n        return proto2.hasOwnProperty(Symbol.iterator) &&\n          !proto1    .hasOwnProperty(Symbol.iterator) &&\n          !iterator  .hasOwnProperty(Symbol.iterator) &&\n          iterator[Symbol.iterator]() === iterator;\n      */",
  "built-ins›Map›Map[Symbol.species]": "/*\n        var prop = Object.getOwnPropertyDescriptor(Map, Symbol.species);\n        return 'get' in prop && Map[Symbol.species] === Map;\n      */",
  "built-ins›Set›basic functionality": "/*\n        var obj = {};\n        var set = new Set();\n\n        set.add(123);\n        set.add(123);\n\n        return set.has(123);\n      */",
  "built-ins›Set›constructor arguments": "/*\n        var obj1 = {};\n        var obj2 = {};\n        var set = new Set([obj1, obj2]);\n\n        return set.has(obj1) && set.has(obj2);\n      */",
  "built-ins›Set›constructor requires new": "/*\n        new Set();\n        try {\n          Set();\n          return false;\n        } catch(e) {\n          return true;\n        }\n      */",
  "built-ins›Set›constructor accepts null": "/*\n        new Set(null);\n        return true;\n      */",
  "built-ins›Set›constructor invokes add": "/*\n        var passed = false;\n        var _add = Set.prototype.add;\n\n        Set.prototype.add = function(v) {\n          passed = true;\n        };\n\n        new Set([1]);\n        Set.prototype.add = _add;\n\n        return passed;\n      */",
  "built-ins›Set›iterator closing": "/*\n        var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        var add = Set.prototype.add;\n        Set.prototype.add = function(){ throw 0 };\n        try {\n          new Set(iter);\n        } catch(e){}\n        Set.prototype.add = add;\n        return closed;\n      */",
  "built-ins›Set›Set.prototype.add returns this": "/*\n        var set = new Set();\n        return set.add(0) === set;\n      */",
  "built-ins›Set›-0 key converts to +0": "/*\n        var set = new Set();\n        set.add(-0);\n        var k;\n        set.forEach(function (value) {\n          k = 1 / value;\n        });\n        return k === Infinity && set.has(+0);\n      */",
  "built-ins›Set›Set.prototype.size": "/*\n        var obj = {};\n        var set = new Set();\n\n        set.add(123);\n        set.add(123);\n        set.add(456);\n\n        return set.size === 2;\n      */",
  "built-ins›Set›Set.prototype.delete": "/*\n        return typeof Set.prototype.delete === \"function\";\n      */",
  "built-ins›Set›Set.prototype.clear": "/*\n        return typeof Set.prototype.clear === \"function\";\n      */",
  "built-ins›Set›Set.prototype.forEach": "/*\n        return typeof Set.prototype.forEach === \"function\";\n      */",
  "built-ins›Set›Set.prototype.keys": "/*\n        return typeof Set.prototype.keys === \"function\";\n      */",
  "built-ins›Set›Set.prototype.values": "/*\n        return typeof Set.prototype.values === \"function\";\n      */",
  "built-ins›Set›Set.prototype.entries": "/*\n        return typeof Set.prototype.entries === \"function\";\n      */",
  "built-ins›Set›Set.prototype[Symbol.iterator]": "/*\n        return typeof Set.prototype[Symbol.iterator] === \"function\";\n      */",
  "built-ins›Set›Set.prototype isn't an instance": "/*\n        new Set();\n        var obj = {};\n        try {\n          Set.prototype.has(obj);\n        }\n        catch(e) {\n          return true;\n        }\n      */",
  "built-ins›Set›Set iterator prototype chain": "/*\n        // Iterator instance\n        var iterator = new Set()[Symbol.iterator]();\n        // %SetIteratorPrototype%\n        var proto1 = Object.getPrototypeOf(iterator);\n        // %IteratorPrototype%\n        var proto2 = Object.getPrototypeOf(proto1);\n\n        return proto2.hasOwnProperty(Symbol.iterator) &&\n          !proto1    .hasOwnProperty(Symbol.iterator) &&\n          !iterator  .hasOwnProperty(Symbol.iterator) &&\n          iterator[Symbol.iterator]() === iterator;\n      */",
  "built-ins›Set›Set[Symbol.species]": "/*\n        var prop = Object.getOwnPropertyDescriptor(Set, Symbol.species);\n        return 'get' in prop && Set[Symbol.species] === Set;\n      */",
  "built-ins›WeakMap›basic functionality": "/*\n        var key = {};\n        var weakmap = new WeakMap();\n\n        weakmap.set(key, 123);\n\n        return weakmap.has(key) && weakmap.get(key) === 123;\n      */",
  "built-ins›WeakMap›constructor arguments": "/*\n        var key1 = {};\n        var key2 = {};\n        var weakmap = new WeakMap([[key1, 123], [key2, 456]]);\n\n        return weakmap.has(key1) && weakmap.get(key1) === 123 &&\n   weakmap.has(key2) && weakmap.get(key2) === 456;\n      */",
  "built-ins›WeakMap›constructor requires new": "/*\n        new WeakMap();\n        try {\n          WeakMap();\n          return false;\n        } catch(e) {\n          return true;\n        }\n      */",
  "built-ins›WeakMap›constructor accepts null": "/*\n        new WeakMap(null);\n        return true;\n      */",
  "built-ins›WeakMap›constructor invokes set": "/*\n        var passed = false;\n        var _set = WeakMap.prototype.set;\n\n        WeakMap.prototype.set = function(k, v) {\n          passed = true;\n        };\n\n        new WeakMap([ [{ }, 42] ]);\n        WeakMap.prototype.set = _set;\n\n        return passed;\n      */",
  "built-ins›WeakMap›frozen objects as keys": "/*\n        var f = Object.freeze({});\n        var m = new WeakMap;\n        m.set(f, 42);\n        return m.get(f) === 42;\n      */",
  "built-ins›WeakMap›iterator closing": "/*\n        var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        try {\n          new WeakMap(iter);\n        } catch(e){}\n        return closed;\n      */",
  "built-ins›WeakMap›WeakMap.prototype.set returns this": "/*\n        var weakmap = new WeakMap();\n        var key = {};\n        return weakmap.set(key, 0) === weakmap;\n      */",
  "built-ins›WeakMap›WeakMap.prototype.delete": "/*\n        return typeof WeakMap.prototype.delete === \"function\";\n      */",
  "built-ins›WeakMap›no WeakMap.prototype.clear method": "/*\n        if (!(\"clear\" in WeakMap.prototype)) {\n          return true;\n        }\n        var m = new WeakMap();\n        var key = {};\n        m.set(key, 2);\n        m.clear();\n        return m.has(key);\n      */",
  "built-ins›WeakMap›.has, .get and .delete methods accept primitives": "/*\n        var m = new WeakMap;\n        return m.has(1) === false\n          && m.get(1) === undefined\n          && m.delete(1) === false;\n      */",
  "built-ins›WeakMap›WeakMap.prototype isn't an instance": "/*\n        new WeakMap();\n        var obj = {};\n        try {\n          WeakMap.prototype.has(obj);\n        }\n        catch(e) {\n          return true;\n        }\n      */",
  "built-ins›WeakSet›basic functionality": "/*\n        var obj1 = {};\n        var weakset = new WeakSet();\n\n        weakset.add(obj1);\n        weakset.add(obj1);\n\n        return weakset.has(obj1);\n      */",
  "built-ins›WeakSet›constructor arguments": "/*\n        var obj1 = {}, obj2 = {};\n        var weakset = new WeakSet([obj1, obj2]);\n\n        return weakset.has(obj1) && weakset.has(obj2);\n      */",
  "built-ins›WeakSet›constructor requires new": "/*\n        new WeakSet();\n        try {\n          WeakSet();\n          return false;\n        } catch(e) {\n          return true;\n        }\n      */",
  "built-ins›WeakSet›constructor accepts null": "/*\n        new WeakSet(null);\n        return true;\n      */",
  "built-ins›WeakSet›constructor invokes add": "/*\n        var passed = false;\n        var _add = WeakSet.prototype.add;\n\n        WeakSet.prototype.add = function(v) {\n          passed = true;\n        };\n\n        new WeakSet([ { } ]);\n        WeakSet.prototype.add = _add;\n\n        return passed;\n      */",
  "built-ins›WeakSet›iterator closing": "/*\n        var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        try {\n          new WeakSet(iter);\n        } catch(e){}\n        return closed;\n      */",
  "built-ins›WeakSet›WeakSet.prototype.add returns this": "/*\n        var weakset = new WeakSet();\n        var obj = {};\n        return weakset.add(obj) === weakset;\n      */",
  "built-ins›WeakSet›WeakSet.prototype.delete": "/*\n        return typeof WeakSet.prototype.delete === \"function\";\n      */",
  "built-ins›WeakSet›no WeakSet.prototype.clear method": "/*\n        if (!(\"clear\" in WeakSet.prototype)) {\n          return true;\n        }\n        var s = new WeakSet();\n        var key = {};\n        s.add(key);\n        s.clear();\n        return s.has(key);\n      */",
  "built-ins›WeakSet›.has and .delete methods accept primitives": "/*\n        var s = new WeakSet;\n        return s.has(1) === false\n          && s.delete(1) === false;\n      */",
  "built-ins›WeakSet›WeakSet.prototype isn't an instance": "/*\n        new WeakSet();\n        var obj = {};\n        try {\n          WeakSet.prototype.has(obj);\n        }\n        catch(e) {\n          return true;\n        }\n      */",
  "built-ins›Proxy›constructor requires new": "/*\n        new Proxy({}, {});\n        try {\n          Proxy({}, {});\n          return false;\n        } catch(e) {\n          return true;\n        }\n      */",
  "built-ins›Proxy›no \"prototype\" property": "/*\n        new Proxy({}, {});\n        return !Proxy.hasOwnProperty('prototype');\n      */",
  "built-ins›Proxy›\"get\" handler": "/*\n        var proxied = { };\n        var proxy = new Proxy(proxied, {\n          get: function (t, k, r) {\nreturn t === proxied && k === \"foo\" && r === proxy && 5;\n          }\n        });\n        return proxy.foo === 5;\n      */",
  "built-ins›Proxy›\"get\" handler, instances of proxies": "/*\n        var proxied = { };\n        var proxy = Object.create(new Proxy(proxied, {\n          get: function (t, k, r) {\nreturn t === proxied && k === \"foo\" && r === proxy && 5;\n          }\n        }));\n        return proxy.foo === 5;\n      */",
  "built-ins›Proxy›\"get\" handler invariants": "/*\n        var passed = false;\n        var proxied = { };\n        var proxy = new Proxy(proxied, {\n          get: function () {\npassed = true;\nreturn 4;\n          }\n        });\n        // The value reported for a property must be the same as the value of the corresponding\n        // target object property if the target object property is a non-writable,\n        // non-configurable own data property.\n        Object.defineProperty(proxied, \"foo\", { value: 5, enumerable: true });\n        try {\n          proxy.foo;\n          return false;\n        }\n        catch(e) {}\n        // The value reported for a property must be undefined if the corresponding target\n        // object property is a non-configurable own accessor property that has undefined\n        // as its [[Get]] attribute.\n        Object.defineProperty(proxied, \"bar\",\n          { set: function(){}, enumerable: true });\n        try {\n          proxy.bar;\n          return false;\n        }\n        catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›\"set\" handler": "/*\n        var proxied = { };\n        var passed = false;\n        var proxy = new Proxy(proxied, {\n          set: function (t, k, v, r) {\npassed = t === proxied && k + v === \"foobar\" && r === proxy;\n          }\n        });\n        proxy.foo = \"bar\";\n        return passed;\n      */",
  "built-ins›Proxy›\"set\" handler, instances of proxies": "/*\n        var proxied = { };\n        var passed = false;\n        var proxy = Object.create(new Proxy(proxied, {\n          set: function (t, k, v, r) {\npassed = t === proxied && k + v === \"foobar\" && r === proxy;\n          }\n        }));\n        proxy.foo = \"bar\";\n        return passed;\n      */",
  "built-ins›Proxy›\"set\" handler invariants": "/*\n        var passed = false;\n        new Proxy({},{});\n        // Cannot change the value of a property to be different from the value of\n        // the corresponding target object if the corresponding target object\n        // property is a non-writable, non-configurable own data property.\n        var proxied = {};\n        var proxy = new Proxy(proxied, {\n          set: function () {\npassed = true;\nreturn true;\n          }\n        });\n        Object.defineProperty(proxied, \"foo\", { value: 2, enumerable: true });\n        proxy.foo = 2;\n        try {\n          proxy.foo = 4;\n          return false;\n        } catch(e) {}\n        // Cannot set the value of a property if the corresponding target\n        // object property is a non-configurable own accessor property\n        // that has undefined as its [[Set]] attribute.\n        Object.defineProperty(proxied, \"bar\",\n          { get: function(){}, enumerable: true });\n        try {\n          proxy.bar = 2;\n          return false;\n        } catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›\"has\" handler": "/*\n        var proxied = {};\n        var passed = false;\n        \"foo\" in new Proxy(proxied, {\n          has: function (t, k) {\npassed = t === proxied && k === \"foo\";\n          }\n        });\n        return passed;\n      */",
  "built-ins›Proxy›\"has\" handler, instances of proxies": "/*\n        var proxied = {};\n        var passed = false;\n        \"foo\" in Object.create(new Proxy(proxied, {\n          has: function (t, k) {\npassed = t === proxied && k === \"foo\";\n          }\n        }));\n        return passed;\n      */",
  "built-ins›Proxy›\"has\" handler invariants": "/*\n        var passed = false;\n        new Proxy({},{});\n        // A property cannot be reported as non-existent, if it exists as a\n        // non-configurable own property of the target object.\n        var proxied = {};\n        var proxy = new Proxy(proxied, {\n          has: function () {\npassed = true;\nreturn false;\n          }\n        });\n        Object.defineProperty(proxied, \"foo\", { value: 2, writable: true, enumerable: true });\n        try {\n          'foo' in proxy;\n          return false;\n        } catch(e) {}\n        // A property cannot be reported as non-existent, if it exists as an\n        // own property of the target object and the target object is not extensible.\n        proxied.bar = 2;\n        Object.preventExtensions(proxied);\n        try {\n          'bar' in proxy;\n          return false;\n        } catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›\"deleteProperty\" handler": "/*\n        var proxied = {};\n        var passed = false;\n        delete new Proxy(proxied, {\n          deleteProperty: function (t, k) {\npassed = t === proxied && k === \"foo\";\n          }\n        }).foo;\n        return passed;\n      */",
  "built-ins›Proxy›\"deleteProperty\" handler invariant": "/*\n        var passed = false;\n        new Proxy({},{});\n        // A property cannot be reported as deleted, if it exists as a non-configurable\n        // own property of the target object.\n        var proxied = {};\n        Object.defineProperty(proxied, \"foo\", { value: 2, writable: true, enumerable: true });\n        try {\n          delete new Proxy(proxied, {\ndeleteProperty: function () {\n  passed = true;\n  return true;\n}\n          }).foo;\n          return false;\n        } catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›\"getOwnPropertyDescriptor\" handler": "/*\n        var proxied = {};\n        var fakeDesc = { value: \"foo\", configurable: true };\n        var returnedDesc = Object.getOwnPropertyDescriptor(\n          new Proxy(proxied, {\ngetOwnPropertyDescriptor: function (t, k) {\n  return t === proxied && k === \"foo\" && fakeDesc;\n}\n          }),\n          \"foo\"\n        );\n        return (returnedDesc.value     === fakeDesc.value\n          && returnedDesc.configurable === fakeDesc.configurable\n          && returnedDesc.writable     === false\n          && returnedDesc.enumerable   === false);\n      */",
  "built-ins›Proxy›\"getOwnPropertyDescriptor\" handler invariants": "/*\n        var passed = false;\n        new Proxy({},{});\n        // A property cannot be reported as non-existent, if it exists as a non-configurable\n        // own property of the target object.\n        var proxied = {};\n        var proxy = new Proxy(proxied, {\n          getOwnPropertyDescriptor: function () {\npassed = true;\nreturn undefined;\n          }\n        });\n        Object.defineProperty(proxied, \"foo\", { value: 2, writable: true, enumerable: true });\n        try {\n          Object.getOwnPropertyDescriptor(proxy, \"foo\");\n          return false;\n        } catch(e) {}\n        // A property cannot be reported as non-existent, if it exists as an own property\n        // of the target object and the target object is not extensible.\n        proxied.bar = 3;\n        Object.preventExtensions(proxied);\n        try {\n          Object.getOwnPropertyDescriptor(proxy, \"bar\");\n          return false;\n        } catch(e) {}\n        // A property cannot be reported as existent, if it does not exists as an own property\n        // of the target object and the target object is not extensible.\n        try {\n          Object.getOwnPropertyDescriptor(new Proxy(proxied, {\ngetOwnPropertyDescriptor: function() {\n  return { value: 2, configurable: true, writable: true, enumerable: true };\n}}), \"baz\");\n          return false;\n        } catch(e) {}\n        // A property cannot be reported as non-configurable, if it does not exists as an own\n        // property of the target object or if it exists as a configurable own property of\n        // the target object.\n        try {\n          Object.getOwnPropertyDescriptor(new Proxy({}, {\ngetOwnPropertyDescriptor: function() {\n  return { value: 2, configurable: false, writable: true, enumerable: true };\n}}), \"baz\");\n          return false;\n        } catch(e) {}\n        try {\n          Object.getOwnPropertyDescriptor(new Proxy({baz:1}, {\ngetOwnPropertyDescriptor: function() {\n  return { value: 1, configurable: false, writable: true, enumerable: true };\n}}), \"baz\");\n          return false;\n        } catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›\"defineProperty\" handler": "/*\n        var proxied = {};\n        var passed = false;\n        Object.defineProperty(\n          new Proxy(proxied, {\ndefineProperty: function (t, k, d) {\n  passed = t === proxied && k === \"foo\" && d.value === 5;\n  return true;\n}\n          }),\n          \"foo\",\n          { value: 5, configurable: true }\n        );\n        return passed;\n      */",
  "built-ins›Proxy›\"defineProperty\" handler invariants": "/*\n        var passed = false;\n        new Proxy({},{});\n        // A property cannot be added, if the target object is not extensible.\n        var proxied = Object.preventExtensions({});\n        var proxy = new Proxy(proxied, {\n          defineProperty: function() {\npassed = true;\nreturn true;\n          }\n        });\n        try {\n          Object.defineProperty(proxy, \"foo\", { value: 2 });\n          return false;\n        } catch(e) {}\n        // A property cannot be non-configurable, unless there exists a corresponding\n        // non-configurable own property of the target object.\n        try {\n          Object.defineProperty(\nnew Proxy({ bar: true }, {\n  defineProperty: function () {\n    return true;\n  }\n}),\n\"bar\",\n{ value: 5, configurable: false, writable: true, enumerable: true }\n          );\n          return false;\n        } catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›\"getPrototypeOf\" handler": "/*\n        var proxied = {};\n        var fakeProto = {};\n        var proxy = new Proxy(proxied, {\n          getPrototypeOf: function (t) {\nreturn t === proxied && fakeProto;\n          }\n        });\n        return Object.getPrototypeOf(proxy) === fakeProto;\n      */",
  "built-ins›Proxy›\"getPrototypeOf\" handler invariant": "/*\n        var passed = false;\n        new Proxy({},{});\n        // If the target object is not extensible, [[GetPrototypeOf]] applied to the proxy object\n        // must return the same value as [[GetPrototypeOf]] applied to the proxy object's target object.\n        try {\n          Object.getPrototypeOf(new Proxy(Object.preventExtensions({}), {\ngetPrototypeOf: function () {\n  passed = true;\n  return {};\n}\n          }));\n          return false;\n        } catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›\"setPrototypeOf\" handler": "/*\n        var proxied = {};\n        var newProto = {};\n        var passed = false;\n        Object.setPrototypeOf(\n          new Proxy(proxied, {\nsetPrototypeOf: function (t, p) {\n  passed = t === proxied && p === newProto;\n  return true;\n}\n          }),\n          newProto\n        );\n        return passed;\n      */",
  "built-ins›Proxy›\"setPrototypeOf\" handler invariant": "/*\n        var passed = false;\n        new Proxy({},{});\n        Object.setPrototypeOf({},{});\n        // If the target object is not extensible, the argument value must be the\n        // same as the result of [[GetPrototypeOf]] applied to target object.\n        try {\n          Object.setPrototypeOf(\nnew Proxy(Object.preventExtensions({}), {\n  setPrototypeOf: function () {\n    passed = true;\n    return true;\n  }\n}),{});\n          return false;\n        } catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›\"isExtensible\" handler": "/*\n        var proxied = {};\n        var passed = false;\n        Object.isExtensible(\n          new Proxy(proxied, {\nisExtensible: function (t) {\n  passed = t === proxied; return true;\n}\n          })\n        );\n        return passed;\n      */",
  "built-ins›Proxy›\"isExtensible\" handler invariant": "/*\n        var passed = false;\n        new Proxy({},{});\n        // [[IsExtensible]] applied to the proxy object must return the same value\n        // as [[IsExtensible]] applied to the proxy object's target object with the same argument.\n        try {\n          Object.isExtensible(new Proxy({}, {\nisExtensible: function (t) {\n  passed = true;\n  return false;\n}\n          }));\n          return false;\n        } catch(e) {}\n        try {\n          Object.isExtensible(new Proxy(Object.preventExtensions({}), {\nisExtensible: function (t) {\n  return true;\n}\n          }));\n          return false;\n        } catch(e) {}\n        return true;\n      */",
  "built-ins›Proxy›\"preventExtensions\" handler": "/*\n        var proxied = {};\n        var passed = false;\n        Object.preventExtensions(\n          new Proxy(proxied, {\npreventExtensions: function (t) {\n  passed = t === proxied;\n  return Object.preventExtensions(proxied);\n}\n          })\n        );\n        return passed;\n      */",
  "built-ins›Proxy›\"preventExtensions\" handler invariant": "/*\n        var passed = false;\n        new Proxy({},{});\n        // [[PreventExtensions]] applied to the proxy object only returns true\n        // if [[IsExtensible]] applied to the proxy object's target object is false.\n        try {\n          Object.preventExtensions(new Proxy({}, {\npreventExtensions: function () {\n  passed = true;\n  return true;\n}\n          }));\n          return false;\n        } catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›\"ownKeys\" handler": "/*\n        var proxied = {};\n        var passed = false;\n        Object.keys(\n          new Proxy(proxied, {\nownKeys: function (t) {\n  passed = t === proxied; return [];\n}\n          })\n        );\n        return passed;\n      */",
  "built-ins›Proxy›\"ownKeys\" handler invariant": "/*\n        var passed = false;\n        new Proxy({},{});\n        // The Type of each result List element is either String or Symbol.\n        try {\n          Object.keys(new Proxy({}, {\nownKeys: function () {\n  passed = true;\n  return [2];\n}}));\n          return false;\n        } catch(e) {}\n        // The result List must contain the keys of all non-configurable own properties of the target object.\n        var proxied = {};\n        Object.defineProperty(proxied, \"foo\", { value: 2, writable: true, enumerable: true });\n        try {\n          Object.keys(new Proxy(proxied, {\nownKeys: function () {\n  return [];\n}}));\n          return false;\n        } catch(e) {}\n        // If the target object is not extensible, then the result List must contain all the keys\n        // of the own properties of the target object and no other values.\n        try {\n          Object.keys(new Proxy(Object.preventExtensions({b:1}), {\nownKeys: function () {\n  return ['a'];\n}}));\n          return false;\n        } catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›\"apply\" handler": "/*\n        var proxied = function(){};\n        var passed = false;\n        var host = {\n          method: new Proxy(proxied, {\napply: function (t, thisArg, args) {\n  passed = t === proxied && thisArg === host && args + \"\" === \"foo,bar\";\n}\n          })\n        };\n        host.method(\"foo\", \"bar\");\n        return passed;\n      */",
  "built-ins›Proxy›\"apply\" handler invariant": "/*\n        var passed = false;\n        new Proxy(function(){}, {\napply: function () { passed = true; }\n        })();\n        // A Proxy exotic object only has a [[Call]] internal method if the\n        // initial value of its [[ProxyTarget]] internal slot is an object\n        // that has a [[Call]] internal method.\n        try {\n          new Proxy({}, {\napply: function () {}\n          })();\n          return false;\n        } catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›\"construct\" handler": "/*\n        var proxied = function(){};\n        var passed = false;\n        new new Proxy(proxied, {\n          construct: function (t, args) {\npassed = t === proxied && args + \"\" === \"foo,bar\";\nreturn {};\n          }\n        })(\"foo\",\"bar\");\n        return passed;\n      */",
  "built-ins›Proxy›\"construct\" handler invariants": "/*\n        var passed = false;\n        new Proxy({},{});\n        // A Proxy exotic object only has a [[Construct]] internal method if the\n        // initial value of its [[ProxyTarget]] internal slot is an object\n        // that has a [[Construct]] internal method.\n        try {\n          new new Proxy({}, {\nconstruct: function (t, args) {\n  return {};\n}\n          })();\n          return false;\n        } catch(e) {}\n        // The result of [[Construct]] must be an Object.\n        try {\n          new new Proxy(function(){}, {\nconstruct: function (t, args) {\n  passed = true;\n  return 5;\n}\n          })();\n          return false;\n        } catch(e) {}\n        return passed;\n      */",
  "built-ins›Proxy›Proxy.revocable": "/*\n        var obj = Proxy.revocable({}, { get: function() { return 5; } });\n        var passed = (obj.proxy.foo === 5);\n        obj.revoke();\n        try {\n          obj.proxy.foo;\n        } catch(e) {\n          passed &= e instanceof TypeError;\n        }\n        return passed;\n      */",
  "built-ins›Proxy›Array.isArray support": "/*\n        return Array.isArray(new Proxy([], {}));\n      */",
  "built-ins›Proxy›JSON.stringify support": "/*\n        return JSON.stringify(new Proxy(['foo'], {})) === '[\"foo\"]';\n      */",
  "built-ins›Reflect›Reflect.get": "/*\n        return Reflect.get({ qux: 987 }, \"qux\") === 987;\n      */",
  "built-ins›Reflect›Reflect.set": "/*\n        var obj = {};\n        Reflect.set(obj, \"quux\", 654);\n        return obj.quux === 654;\n      */",
  "built-ins›Reflect›Reflect.has": "/*\n        return Reflect.has({ qux: 987 }, \"qux\");\n      */",
  "built-ins›Reflect›Reflect.deleteProperty": "/*\n        var obj = { bar: 456 };\n        Reflect.deleteProperty(obj, \"bar\");\n        return !(\"bar\" in obj);\n      */",
  "built-ins›Reflect›Reflect.getOwnPropertyDescriptor": "/*\n        var obj = { baz: 789 };\n        var desc = Reflect.getOwnPropertyDescriptor(obj, \"baz\");\n        return desc.value === 789 &&\n          desc.configurable && desc.writable && desc.enumerable;\n      */",
  "built-ins›Reflect›Reflect.defineProperty": "/*\n        var obj = {};\n        Reflect.defineProperty(obj, \"foo\", { value: 123 });\n        return obj.foo === 123 &&\n          Reflect.defineProperty(Object.freeze({}), \"foo\", { value: 123 }) === false;\n      */",
  "built-ins›Reflect›Reflect.getPrototypeOf": "/*\n        return Reflect.getPrototypeOf([]) === Array.prototype;\n      */",
  "built-ins›Reflect›Reflect.setPrototypeOf": "/*\n        var obj = {};\n        Reflect.setPrototypeOf(obj, Array.prototype);\n        return obj instanceof Array;\n      */",
  "built-ins›Reflect›Reflect.isExtensible": "/*\n        return Reflect.isExtensible({}) &&\n          !Reflect.isExtensible(Object.preventExtensions({}));\n      */",
  "built-ins›Reflect›Reflect.preventExtensions": "/*\n        var obj = {};\n        Reflect.preventExtensions(obj);\n        return !Object.isExtensible(obj);\n      */",
  "built-ins›Reflect›Reflect.ownKeys, string keys": "/*\n        var obj = Object.create({ C: true });\n        obj.A = true;\n        Object.defineProperty(obj, 'B', { value: true, enumerable: false });\n\n        return Reflect.ownKeys(obj).sort() + '' === \"A,B\";\n      */",
  "built-ins›Reflect›Reflect.ownKeys, symbol keys": "/*\n        var s1 = Symbol(), s2 = Symbol(), s3 = Symbol();\n        var proto = {};\n        proto[s1] = true;\n        var obj = Object.create(proto);\n        obj[s2] = true;\n        Object.defineProperty(obj, s3, { value: true, enumerable: false });\n\n        var keys = Reflect.ownKeys(obj);\n        return keys.indexOf(s2) >-1 && keys.indexOf(s3) >-1 && keys.length === 2;\n      */",
  "built-ins›Reflect›Reflect.apply": "/*\n        return Reflect.apply(Array.prototype.push, [1,2], [3,4,5]) === 5;\n      */",
  "built-ins›Reflect›Reflect.construct": "/*\n        return Reflect.construct(function(a, b, c) {\n          this.qux = a + b + c;\n        }, [\"foo\", \"bar\", \"baz\"]).qux === \"foobarbaz\";\n      */",
  "built-ins›Reflect›Reflect.construct sets new.target meta property": "/*\n        return Reflect.construct(function(a, b, c) {\n          if (new.target === Object) {\nthis.qux = a + b + c;\n          }\n        }, [\"foo\", \"bar\", \"baz\"], Object).qux === \"foobarbaz\";\n      */",
  "built-ins›Reflect›Reflect.construct creates instance from newTarget argument": "/*\n        function F(){}\n        return Reflect.construct(function(){}, [], F) instanceof F;\n      */",
  "built-ins›Promise›basic functionality": "/*\n        var p1 = new Promise(function(resolve, reject) { resolve(\"foo\"); });\n        var p2 = new Promise(function(resolve, reject) { reject(\"quux\"); });\n        var score = 0;\n\n        function thenFn(result)  { score += (result === \"foo\");  check(); }\n        function catchFn(result) { score += (result === \"quux\"); check(); }\n        function shouldNotRun(result)  { score = -Infinity;   }\n\n        p1.then(thenFn, shouldNotRun);\n        p2.then(shouldNotRun, catchFn);\n        p1.catch(shouldNotRun);\n        p2.catch(catchFn);\n\n        p1.then(function() {\n          // Promise.prototype.then() should return a new Promise\n          score += p1.then() !== p1;\n          check();\n        });\n\n        function check() {\n          if (score === 4) asyncTestPassed();\n        }\n      */",
  "built-ins›Promise›constructor requires new": "/*\n        new Promise(function(){});\n        try {\n          Promise(function(){});\n          return false;\n        } catch(e) {\n          return true;\n        }\n      */",
  "built-ins›Promise›Promise.prototype isn't an instance": "/*\n        new Promise(function(){});\n        try {\n          Promise.prototype.then(function(){});\n        } catch (e) {\n          return true;\n        }\n      */",
  "built-ins›Promise›Promise.all": "/*\n        var fulfills = Promise.all([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,100,\"bar\"); }),\n        ]);\n        var rejects = Promise.all([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 100,\"qux\"); }),\n        ]);\n        var score = 0;\n        fulfills.then(function(result) { score += (result + \"\" === \"foo,bar\"); check(); });\n        rejects.catch(function(result) { score += (result === \"qux\"); check(); });\n\n        function check() {\n          if (score === 2) asyncTestPassed();\n        }\n      */",
  "built-ins›Promise›Promise.all, generic iterables": "/*\n        var fulfills = Promise.all(global.__createIterableObject([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,100,\"bar\"); }),\n        ]));\n        var rejects = Promise.all(global.__createIterableObject([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 100,\"qux\"); }),\n        ]));\n        var score = 0;\n        fulfills.then(function(result) { score += (result + \"\" === \"foo,bar\"); check(); });\n        rejects.catch(function(result) { score += (result === \"qux\"); check(); });\n\n        function check() {\n          if (score === 2) asyncTestPassed();\n        }\n      */",
  "built-ins›Promise›Promise.race": "/*\n        var fulfills = Promise.race([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 300,\"bar\"); }),\n        ]);\n        var rejects = Promise.race([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,300,\"qux\"); }),\n        ]);\n        var score = 0;\n        fulfills.then(function(result) { score += (result === \"foo\"); check(); });\n        rejects.catch(function(result) { score += (result === \"baz\"); check(); });\n\n        function check() {\n          if (score === 2) asyncTestPassed();\n        }\n      */",
  "built-ins›Promise›Promise.race, generic iterables": "/*\n        var fulfills = Promise.race(global.__createIterableObject([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 300,\"bar\"); }),\n        ]));\n        var rejects = Promise.race(global.__createIterableObject([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,300,\"qux\"); }),\n        ]));\n        var score = 0;\n        fulfills.then(function(result) { score += (result === \"foo\"); check(); });\n        rejects.catch(function(result) { score += (result === \"baz\"); check(); });\n\n        function check() {\n          if (score === 2) asyncTestPassed();\n        }\n      */",
  "built-ins›Promise›Promise[Symbol.species]": "/*\n        var prop = Object.getOwnPropertyDescriptor(Promise, Symbol.species);\n        return 'get' in prop && Promise[Symbol.species] === Promise;\n      */",
  "built-ins›Symbol›basic functionality": "/*\n        var object = {};\n        var symbol = Symbol();\n        var value = {};\n        object[symbol] = value;\n        return object[symbol] === value;\n      */",
  "built-ins›Symbol›typeof support": "/*\n        return typeof Symbol() === \"symbol\";\n      */",
  "built-ins›Symbol›symbol keys are hidden to pre-ES6 code": "/*\n        var object = {};\n        var symbol = Symbol();\n        object[symbol] = 1;\n\n        for (var x in object){}\n        var passed = !x;\n\n        if (Object.keys && Object.getOwnPropertyNames) {\n          passed &= Object.keys(object).length === 0\n&& Object.getOwnPropertyNames(object).length === 0;\n        }\n\n        return passed;\n      */",
  "built-ins›Symbol›Object.defineProperty support": "/*\n        var object = {};\n        var symbol = Symbol();\n        var value = {};\n\n        if (Object.defineProperty) {\n          Object.defineProperty(object, symbol, { value: value });\n          return object[symbol] === value;\n        }\n\n        return passed;\n      */",
  "built-ins›Symbol›symbols inherit from Symbol.prototype": "/*\n        var symbol = Symbol();\n        var passed = symbol.foo === undefined;\n        Symbol.prototype.foo = 2;\n        passed &= symbol.foo === 2;\n        delete Symbol.prototype.foo;\n        return passed;\n      */",
  "built-ins›Symbol›cannot coerce to string or number": "/*\n        var symbol = Symbol();\n\n        try {\n          symbol + \"\";\n          return false;\n        }\n        catch(e) {}\n\n        try {\n          symbol + 0;\n          return false;\n        } catch(e) {}\n\n        return true;\n      */",
  "built-ins›Symbol›can convert with String()": "/*\n        return String(Symbol(\"foo\")) === \"Symbol(foo)\";\n      */",
  "built-ins›Symbol›new Symbol() throws": "/*\n        var symbol = Symbol();\n        try {\n          new Symbol();\n        } catch(e) {\n          return true;\n        }\n      */",
  "built-ins›Symbol›Object(symbol)": "/*\n        var symbol = Symbol();\n        var symbolObject = Object(symbol);\n\n        return typeof symbolObject === \"object\" &&\n          symbolObject instanceof Symbol &&\n          symbolObject == symbol &&\n          symbolObject !== symbol &&\n          symbolObject.valueOf() === symbol;\n      */",
  "built-ins›Symbol›JSON.stringify ignores symbols": "/*\n        var object = {foo: Symbol()};\n        object[Symbol()] = 1;\n        var array = [Symbol()];\n        return JSON.stringify(object) === '{}' && JSON.stringify(array) === '[null]' && JSON.stringify(Symbol()) === undefined;\n      */",
  "built-ins›Symbol›global symbol registry": "/*\n        var symbol = Symbol.for('foo');\n        return Symbol.for('foo') === symbol &&\n           Symbol.keyFor(symbol) === 'foo';\n      */",
  "built-ins›well-known symbols›Symbol.hasInstance": "/*\n        var passed = false;\n        var obj = { foo: true };\n        var C = function(){};\n        Object.defineProperty(C, Symbol.hasInstance, {\n          value: function(inst) { passed = inst.foo; return false; }\n        });\n        obj instanceof C;\n        return passed;\n      */",
  "built-ins›well-known symbols›Symbol.isConcatSpreadable": "/*\n        var a = [], b = [];\n        b[Symbol.isConcatSpreadable] = false;\n        a = a.concat(b);\n        return a[0] === b;\n      */",
  "built-ins›well-known symbols›Symbol.iterator, existence": "/*\n        return \"iterator\" in Symbol;\n      */",
  "built-ins›well-known symbols›Symbol.iterator, arguments object": "/*\n        return (function() {\n          return typeof arguments[Symbol.iterator] === 'function'\n&& Object.hasOwnProperty.call(arguments, Symbol.iterator);\n        }());\n      */",
  "built-ins›well-known symbols›Symbol.species, existence": "/*\n        return \"species\" in Symbol;\n      */",
  "built-ins›well-known symbols›Symbol.species, Array.prototype.concat": "/*\n        var obj = [];\n        obj.constructor = {};\n        obj.constructor[Symbol.species] = function() {\nreturn { foo: 1 };\n        };\n        return Array.prototype.concat.call(obj, []).foo === 1;\n      */",
  "built-ins›well-known symbols›Symbol.species, Array.prototype.filter": "/*\n        var obj = [];\n        obj.constructor = {};\n        obj.constructor[Symbol.species] = function() {\nreturn { foo: 1 };\n        };\n        return Array.prototype.filter.call(obj, Boolean).foo === 1;\n      */",
  "built-ins›well-known symbols›Symbol.species, Array.prototype.map": "/*\n        var obj = [];\n        obj.constructor = {};\n        obj.constructor[Symbol.species] = function() {\nreturn { foo: 1 };\n        };\n        return Array.prototype.map.call(obj, Boolean).foo === 1;\n      */",
  "built-ins›well-known symbols›Symbol.species, Array.prototype.slice": "/*\n        var obj = [];\n        obj.constructor = {};\n        obj.constructor[Symbol.species] = function() {\nreturn { foo: 1 };\n        };\n        return Array.prototype.slice.call(obj, 0).foo === 1;\n      */",
  "built-ins›well-known symbols›Symbol.species, Array.prototype.splice": "/*\n        var obj = [];\n        obj.constructor = {};\n        obj.constructor[Symbol.species] = function() {\nreturn { foo: 1 };\n        };\n        return Array.prototype.splice.call(obj, 0).foo === 1;\n      */",
  "built-ins›well-known symbols›Symbol.species, RegExp.prototype[Symbol.split]": "/*\n        var passed = false;\n        var obj = { constructor: {} };\n        obj[Symbol.split] = RegExp.prototype[Symbol.split];\n        obj.constructor[Symbol.species] = function() {\n          passed = true;\n          return /./;\n        };\n        \"\".split(obj);\n        return passed;\n      */",
  "built-ins›well-known symbols›Symbol.species, Promise.prototype.then": "/*\n        var promise      = new Promise(function(resolve){ resolve(42); });\n        var FakePromise1 = promise.constructor = function(exec){ exec(function(){}, function(){}); };\n        var FakePromise2 = function(exec){ exec(function(){}, function(){}); };\n        Object.defineProperty(FakePromise1, Symbol.species, {value: FakePromise2});\n        return promise.then(function(){}) instanceof FakePromise2;\n      */",
  "built-ins›well-known symbols›Symbol.replace": "/*\n        var O = {};\n        O[Symbol.replace] = function(){\n          return 42;\n        };\n        return ''.replace(O) === 42;\n      */",
  "built-ins›well-known symbols›Symbol.search": "/*\n        var O = {};\n        O[Symbol.search] = function(){\n          return 42;\n        };\n        return ''.search(O) === 42;\n      */",
  "built-ins›well-known symbols›Symbol.split": "/*\n        var O = {};\n        O[Symbol.split] = function(){\n          return 42;\n        };\n        return ''.split(O) === 42;\n      */",
  "built-ins›well-known symbols›Symbol.match": "/*\n        var O = {};\n        O[Symbol.match] = function(){\n          return 42;\n        };\n        return ''.match(O) === 42;\n      */",
  "built-ins›well-known symbols›Symbol.match, RegExp constructor": "/*\n        var re = /./;\n        re[Symbol.match] = false;\n        var foo = {constructor: RegExp};\n        foo[Symbol.match] = true;\n        return RegExp(re) !== re && RegExp(foo) === foo;\n      */",
  "built-ins›well-known symbols›Symbol.match, String.prototype.startsWith": "/*\n        var re = /./;\n        try {\n          '/./'.startsWith(re);\n        } catch(e){\n          re[Symbol.match] = false;\n          return '/./'.startsWith(re);\n        }\n      */",
  "built-ins›well-known symbols›Symbol.match, String.prototype.endsWith": "/*\n        var re = /./;\n        try {\n          '/./'.endsWith(re);\n        } catch(e){\n          re[Symbol.match] = false;\n          return '/./'.endsWith(re);\n        }\n      */",
  "built-ins›well-known symbols›Symbol.match, String.prototype.includes": "/*\n        var re = /./;\n        try {\n          '/./'.includes(re);\n        } catch(e){\n          re[Symbol.match] = false;\n          return '/./'.includes(re);\n        }\n      */",
  "built-ins›well-known symbols›Symbol.toPrimitive": "/*\n        var a = {}, b = {}, c = {};\n        var passed = 0;\n        a[Symbol.toPrimitive] = function(hint) { passed += hint === \"number\";  return 0; };\n        b[Symbol.toPrimitive] = function(hint) { passed += hint === \"string\";  return 0; };\n        c[Symbol.toPrimitive] = function(hint) { passed += hint === \"default\"; return 0; };\n\n        a >= 0;\n        b in {};\n        c == 0;\n        return passed === 3;\n      */",
  "built-ins›well-known symbols›Symbol.toStringTag": "/*\n        var a = {};\n        a[Symbol.toStringTag] = \"foo\";\n        return (a + \"\") === \"[object foo]\";\n      */",
  "built-ins›well-known symbols›Symbol.toStringTag affects existing built-ins": "/*\n        var s = Symbol.toStringTag;\n        var passed = true;\n        [\n          [Array.prototype, []],\n          [String.prototype, ''],\n          [arguments, arguments],\n          [Function.prototype, function(){}],\n          [Error.prototype, new Error()],\n          [Boolean.prototype, true],\n          [Number.prototype, 2],\n          [Date.prototype, new Date()],\n          [RegExp.prototype, /./]\n        ].forEach(function(pair){\n          pair[0][s] = \"foo\";\n          passed &= (Object.prototype.toString.call(pair[1]) === \"[object foo]\");\n          delete pair[0][s];\n        });\n        return passed;\n      */",
  "built-ins›well-known symbols›Symbol.toStringTag, new built-ins": "/*\n        var passed = true;\n        var s = Symbol.toStringTag;\n        [\n          [String, \"String Iterator\"],\n          [Array, \"Array Iterator\"],\n          [Map, \"Map Iterator\"],\n          [Set, \"Set Iterator\"]\n        ].forEach(function(pair){\n          var iterProto = Object.getPrototypeOf(new pair[0]()[Symbol.iterator]());\n          passed = passed\n&& iterProto.hasOwnProperty(s)\n&& iterProto[s] === pair[1];\n        });\n        passed = passed\n          && Object.getPrototypeOf(function*(){})[s] === \"GeneratorFunction\"\n          && Object.getPrototypeOf(function*(){}())[s] === \"Generator\"\n          && Map.prototype[s] === \"Map\"\n          && Set.prototype[s] === \"Set\"\n          && ArrayBuffer.prototype[s] === \"ArrayBuffer\"\n          && DataView.prototype[s] === \"DataView\"\n          && Promise.prototype[s] === \"Promise\"\n          && Symbol.prototype[s] === \"Symbol\"\n          && typeof Object.getOwnPropertyDescriptor(\nObject.getPrototypeOf(Int8Array).prototype, Symbol.toStringTag).get === \"function\";\n          return passed;\n      */",
  "built-ins›well-known symbols›Symbol.toStringTag, misc. built-ins": "/*\n        var s = Symbol.toStringTag;\n        return Math[s] === \"Math\"\n          && JSON[s] === \"JSON\";\n      */",
  "built-ins›well-known symbols›Symbol.unscopables": "/*\n        var a = { foo: 1, bar: 2 };\n        a[Symbol.unscopables] = { bar: true };\n        with (a) {\n          return foo === 1 && typeof bar === \"undefined\";\n        }\n      */",
  "built-in extensions›Object static methods›Object.assign": "/*\n        var o = Object.assign({a:true}, {b:true}, {c:true});\n        return \"a\" in o && \"b\" in o && \"c\" in o;\n      */",
  "built-in extensions›Object static methods›Object.is": "/*\n        return typeof Object.is === 'function' &&\n          Object.is(NaN, NaN) &&\n         !Object.is(-0, 0);\n      */",
  "built-in extensions›Object static methods›Object.getOwnPropertySymbols": "/*\n        var o = {};\n        var sym = Symbol(), sym2 = Symbol(), sym3 = Symbol();\n        o[sym]  = true;\n        o[sym2] = true;\n        o[sym3] = true;\n        var result = Object.getOwnPropertySymbols(o);\n        return result[0] === sym\n          && result[1] === sym2\n          && result[2] === sym3;\n      */",
  "built-in extensions›Object static methods›Object.setPrototypeOf": "/*\n        return Object.setPrototypeOf({}, Array.prototype) instanceof Array;\n      */",
  "built-in extensions›function \"name\" property›function statements": "/*\n        function foo(){};\n        return foo.name === 'foo' &&\n          (function(){}).name === '';\n      */",
  "built-in extensions›function \"name\" property›function expressions": "/*\n        return (function foo(){}).name === 'foo' &&\n          (function(){}).name === '';\n      */",
  "built-in extensions›function \"name\" property›new Function": "/*\n        return (new Function).name === \"anonymous\";\n      */",
  "built-in extensions›function \"name\" property›bound functions": "/*\n        function foo() {};\n        return foo.bind({}).name === \"bound foo\" &&\n          (function(){}).bind({}).name === \"bound \";\n      */",
  "built-in extensions›function \"name\" property›variables (function)": "/*\n        var foo = function() {};\n        var bar = function baz() {};\n        return foo.name === \"foo\" && bar.name === \"baz\";\n      */",
  "built-in extensions›function \"name\" property›object methods (function)": "/*\n        var o = { foo: function(){}, bar: function baz(){}};\n        o.qux = function(){};\n        return o.foo.name === \"foo\" &&\n   o.bar.name === \"baz\" &&\n   o.qux.name === \"\";\n      */",
  "built-in extensions›function \"name\" property›accessor properties": "/*\n        var o = { get foo(){}, set foo(x){} };\n        var descriptor = Object.getOwnPropertyDescriptor(o, \"foo\");\n        return descriptor.get.name === \"get foo\" &&\n   descriptor.set.name === \"set foo\";\n      */",
  "built-in extensions›function \"name\" property›shorthand methods": "/*\n        var o = { foo(){} };\n        return o.foo.name === \"foo\";\n      */",
  "built-in extensions›function \"name\" property›shorthand methods (no lexical binding)": "/*\n        var f = \"foo\";\n        return ({f() { return f; }}).f() === \"foo\";\n      */",
  "built-in extensions›function \"name\" property›symbol-keyed methods": "/*\n        var sym1 = Symbol(\"foo\");\n        var sym2 = Symbol();\n        var o = {\n          [sym1]: function(){},\n          [sym2]: function(){}\n        };\n\n        return o[sym1].name === \"[foo]\" &&\n   o[sym2].name === \"\";\n      */",
  "built-in extensions›function \"name\" property›class statements": "/*\n        class foo {};\n        class bar { static name() {} };\n        return foo.name === \"foo\" &&\n          typeof bar.name === \"function\";\n      */",
  "built-in extensions›function \"name\" property›class expressions": "/*\n        return class foo {}.name === \"foo\" &&\n          typeof class bar { static name() {} }.name === \"function\";\n      */",
  "built-in extensions›function \"name\" property›variables (class)": "/*\n        var foo = class {};\n        var bar = class baz {};\n        var qux = class { static name() {} };\n        return foo.name === \"foo\" &&\n   bar.name === \"baz\" &&\n   typeof qux.name === \"function\";\n      */",
  "built-in extensions›function \"name\" property›object methods (class)": "/*\n        var o = { foo: class {}, bar: class baz {}};\n        o.qux = class {};\n        return o.foo.name === \"foo\" &&\n   o.bar.name === \"baz\" &&\n   o.qux.name === \"\";\n      */",
  "built-in extensions›function \"name\" property›class prototype methods": "/*\n        class C { foo(){} };\n        return (new C).foo.name === \"foo\";\n      */",
  "built-in extensions›function \"name\" property›class static methods": "/*\n        class C { static foo(){} };\n        return C.foo.name === \"foo\";\n      */",
  "built-in extensions›function \"name\" property›isn't writable, is configurable": "/*\n        var descriptor = Object.getOwnPropertyDescriptor(function f(){},\"name\");\n        return descriptor.enumerable   === false &&\n   descriptor.writable     === false &&\n   descriptor.configurable === true;\n      */",
  "built-in extensions›String static methods›String.raw": "/*\n        return typeof String.raw === 'function';\n      */",
  "built-in extensions›String static methods›String.fromCodePoint": "/*\n        return typeof String.fromCodePoint === 'function';\n      */",
  "built-in extensions›String.prototype methods›String.prototype.codePointAt": "/*\n        return typeof String.prototype.codePointAt === 'function';\n      */",
  "built-in extensions›String.prototype methods›String.prototype.normalize": "/*\n        return typeof String.prototype.normalize === \"function\"\n          && \"c\\u0327\\u0301\".normalize(\"NFC\") === \"\\u1e09\"\n          && \"\\u1e09\".normalize(\"NFD\") === \"c\\u0327\\u0301\";\n      */",
  "built-in extensions›String.prototype methods›String.prototype.repeat": "/*\n        return typeof String.prototype.repeat === 'function'\n          && \"foo\".repeat(3) === \"foofoofoo\";\n      */",
  "built-in extensions›String.prototype methods›String.prototype.startsWith": "/*\n        return typeof String.prototype.startsWith === 'function'\n          && \"foobar\".startsWith(\"foo\");\n      */",
  "built-in extensions›String.prototype methods›String.prototype.endsWith": "/*\n        return typeof String.prototype.endsWith === 'function'\n          && \"foobar\".endsWith(\"bar\");\n      */",
  "built-in extensions›String.prototype methods›String.prototype.includes": "/*\n        return typeof String.prototype.includes === 'function'\n          && \"foobar\".includes(\"oba\");\n      */",
  "built-in extensions›String.prototype methods›String.prototype[Symbol.iterator]": "/*\n        return typeof String.prototype[Symbol.iterator] === 'function';\n      */",
  "built-in extensions›String.prototype methods›String iterator prototype chain": "/*\n        // Iterator instance\n        var iterator = ''[Symbol.iterator]();\n        // %StringIteratorPrototype%\n        var proto1 = Object.getPrototypeOf(iterator);\n        // %IteratorPrototype%\n        var proto2 = Object.getPrototypeOf(proto1);\n\n        return proto2.hasOwnProperty(Symbol.iterator) &&\n          !proto1    .hasOwnProperty(Symbol.iterator) &&\n          !iterator  .hasOwnProperty(Symbol.iterator) &&\n          iterator[Symbol.iterator]() === iterator;\n      */",
  "built-in extensions›RegExp.prototype properties›RegExp.prototype.flags": "/*\n        return /./igm.flags === \"gim\" && /./.flags === \"\";\n      */",
  "built-in extensions›RegExp.prototype properties›RegExp.prototype[Symbol.match]": "/*\n        return typeof RegExp.prototype[Symbol.match] === 'function';\n      */",
  "built-in extensions›RegExp.prototype properties›RegExp.prototype[Symbol.replace]": "/*\n        return typeof RegExp.prototype[Symbol.replace] === 'function';\n      */",
  "built-in extensions›RegExp.prototype properties›RegExp.prototype[Symbol.split]": "/*\n        return typeof RegExp.prototype[Symbol.split] === 'function';\n      */",
  "built-in extensions›RegExp.prototype properties›RegExp.prototype[Symbol.search]": "/*\n        return typeof RegExp.prototype[Symbol.search] === 'function';\n      */",
  "built-in extensions›RegExp.prototype properties›RegExp[Symbol.species]": "/*\n        var prop = Object.getOwnPropertyDescriptor(RegExp, Symbol.species);\n        return 'get' in prop && RegExp[Symbol.species] === RegExp;\n      */",
  "built-in extensions›Array static methods›Array.from, array-like objects": "/*\n        return Array.from({ 0: \"foo\", 1: \"bar\", length: 2 }) + '' === \"foo,bar\";\n      */",
  "built-in extensions›Array static methods›Array.from, generator instances": "/*\n        var iterable = (function*(){ yield 1; yield 2; yield 3; }());\n        return Array.from(iterable) + '' === \"1,2,3\";\n      */",
  "built-in extensions›Array static methods›Array.from, generic iterables": "/*\n        var iterable = global.__createIterableObject([1, 2, 3]);\n        return Array.from(iterable) + '' === \"1,2,3\";\n      */",
  "built-in extensions›Array static methods›Array.from, instances of generic iterables": "/*\n        var iterable = global.__createIterableObject([1, 2, 3]);\n        return Array.from(Object.create(iterable)) + '' === \"1,2,3\";\n      */",
  "built-in extensions›Array static methods›Array.from map function, array-like objects": "/*\n        return Array.from({ 0: \"foo\", 1: \"bar\", length: 2 }, function(e, i) {\n          return e + this.baz + i;\n        }, { baz: \"d\" }) + '' === \"food0,bard1\";\n      */",
  "built-in extensions›Array static methods›Array.from map function, generator instances": "/*\n        var iterable = (function*(){ yield \"foo\"; yield \"bar\"; yield \"bal\"; }());\n        return Array.from(iterable, function(e, i) {\n          return e + this.baz + i;\n        }, { baz: \"d\" }) + '' === \"food0,bard1,bald2\";\n      */",
  "built-in extensions›Array static methods›Array.from map function, generic iterables": "/*\n        var iterable = global.__createIterableObject([\"foo\", \"bar\", \"bal\"]);\n        return Array.from(iterable, function(e, i) {\n          return e + this.baz + i;\n        }, { baz: \"d\" }) + '' === \"food0,bard1,bald2\";\n      */",
  "built-in extensions›Array static methods›Array.from map function, instances of iterables": "/*\n        var iterable = global.__createIterableObject([\"foo\", \"bar\", \"bal\"]);\n        return Array.from(Object.create(iterable), function(e, i) {\n          return e + this.baz + i;\n        }, { baz: \"d\" }) + '' === \"food0,bard1,bald2\";\n      */",
  "built-in extensions›Array static methods›Array.from, iterator closing": "/*\n        var closed = false;\n        var iter = global.__createIterableObject([1, 2, 3], {\n          'return': function(){ closed = true; return {}; }\n        });\n        try {\n          Array.from(iter, function() { throw 42 });\n        } catch(e){}\n        return closed;\n      */",
  "built-in extensions›Array static methods›Array.of": "/*\n        return typeof Array.of === 'function' &&\n          Array.of(2)[0] === 2;\n      */",
  "built-in extensions›Array static methods›Array[Symbol.species]": "/*\n        var prop = Object.getOwnPropertyDescriptor(Array, Symbol.species);\n        return 'get' in prop && Array[Symbol.species] === Array;\n      */",
  "built-in extensions›Array.prototype methods›Array.prototype.copyWithin": "/*\n        return typeof Array.prototype.copyWithin === 'function';\n      */",
  "built-in extensions›Array.prototype methods›Array.prototype.find": "/*\n        return typeof Array.prototype.find === 'function';\n      */",
  "built-in extensions›Array.prototype methods›Array.prototype.findIndex": "/*\n        return typeof Array.prototype.findIndex === 'function';\n      */",
  "built-in extensions›Array.prototype methods›Array.prototype.fill": "/*\n        return typeof Array.prototype.fill === 'function';\n      */",
  "built-in extensions›Array.prototype methods›Array.prototype.keys": "/*\n        return typeof Array.prototype.keys === 'function';\n      */",
  "built-in extensions›Array.prototype methods›Array.prototype.values": "/*\n        return typeof Array.prototype.values === 'function';\n      */",
  "built-in extensions›Array.prototype methods›Array.prototype.entries": "/*\n        return typeof Array.prototype.entries === 'function';\n      */",
  "built-in extensions›Array.prototype methods›Array.prototype[Symbol.iterator]": "/*\n        return typeof Array.prototype[Symbol.iterator] === 'function';\n      */",
  "built-in extensions›Array.prototype methods›Array iterator prototype chain": "/*\n        // Iterator instance\n        var iterator = [][Symbol.iterator]();\n        // %ArrayIteratorPrototype%\n        var proto1 = Object.getPrototypeOf(iterator);\n        // %IteratorPrototype%\n        var proto2 = Object.getPrototypeOf(proto1);\n\n        return proto2.hasOwnProperty(Symbol.iterator) &&\n          !proto1    .hasOwnProperty(Symbol.iterator) &&\n          !iterator  .hasOwnProperty(Symbol.iterator) &&\n          iterator[Symbol.iterator]() === iterator;\n      */",
  "built-in extensions›Array.prototype methods›Array.prototype[Symbol.unscopables]": "/*\n        var unscopables = Array.prototype[Symbol.unscopables];\n        if (!unscopables) {\n          return false;\n        }\n        var ns = \"find,findIndex,fill,copyWithin,entries,keys,values\".split(\",\");\n        for (var i = 0; i < ns.length; i++) {\n          if (Array.prototype[ns[i]] && !unscopables[ns[i]]) return false;\n        }\n        return true;\n      */",
  "built-in extensions›Number properties›Number.isFinite": "/*\n        return typeof Number.isFinite === 'function';\n      */",
  "built-in extensions›Number properties›Number.isInteger": "/*\n        return typeof Number.isInteger === 'function';\n      */",
  "built-in extensions›Number properties›Number.isSafeInteger": "/*\n        return typeof Number.isSafeInteger === 'function';\n      */",
  "built-in extensions›Number properties›Number.isNaN": "/*\n        return typeof Number.isNaN === 'function';\n      */",
  "built-in extensions›Number properties›Number.EPSILON": "/*\n        return typeof Number.EPSILON === 'number';\n      */",
  "built-in extensions›Number properties›Number.MIN_SAFE_INTEGER": "/*\n        return typeof Number.MIN_SAFE_INTEGER === 'number';\n      */",
  "built-in extensions›Number properties›Number.MAX_SAFE_INTEGER": "/*\n        return typeof Number.MAX_SAFE_INTEGER === 'number';\n      */",
  "built-in extensions›Math methods›Math.clz32": "return typeof Math.clz32 === \"function\";",
  "built-in extensions›Math methods›Math.imul": "return typeof Math.imul === \"function\";",
  "built-in extensions›Math methods›Math.sign": "return typeof Math.sign === \"function\";",
  "built-in extensions›Math methods›Math.log10": "return typeof Math.log10 === \"function\";",
  "built-in extensions›Math methods›Math.log2": "return typeof Math.log2 === \"function\";",
  "built-in extensions›Math methods›Math.log1p": "return typeof Math.log1p === \"function\";",
  "built-in extensions›Math methods›Math.expm1": "return typeof Math.expm1 === \"function\";",
  "built-in extensions›Math methods›Math.cosh": "return typeof Math.cosh === \"function\";",
  "built-in extensions›Math methods›Math.sinh": "return typeof Math.sinh === \"function\";",
  "built-in extensions›Math methods›Math.tanh": "return typeof Math.tanh === \"function\";",
  "built-in extensions›Math methods›Math.acosh": "return typeof Math.acosh === \"function\";",
  "built-in extensions›Math methods›Math.asinh": "return typeof Math.asinh === \"function\";",
  "built-in extensions›Math methods›Math.atanh": "return typeof Math.atanh === \"function\";",
  "built-in extensions›Math methods›Math.trunc": "return typeof Math.trunc === \"function\";",
  "built-in extensions›Math methods›Math.fround": "return typeof Math.fround === \"function\";",
  "built-in extensions›Math methods›Math.cbrt": "return typeof Math.cbrt === \"function\";",
  "built-in extensions›Math methods›Math.hypot": "/*\n        return Math.hypot() === 0 &&\n          Math.hypot(1) === 1 &&\n          Math.hypot(9, 12, 20) === 25 &&\n          Math.hypot(27, 36, 60, 100) === 125;\n      */",
  "built-in extensions›Date.prototype[Symbol.toPrimitive]": "/*\n    var tp = Date.prototype[Symbol.toPrimitive];\n    return tp.call(Object(2), \"number\") === 2\n      && tp.call(Object(2), \"string\") === \"2\"\n      && tp.call(Object(2), \"default\") === \"2\";\n  */",
  "subclassing›Array is subclassable›length property (accessing)": "/*\n        class C extends Array {}\n        var c = new C();\n        var len1 = c.length;\n        c[2] = 'foo';\n        var len2 = c.length;\n        return len1 === 0 && len2 === 3;\n      */",
  "subclassing›Array is subclassable›length property (setting)": "/*\n        class C extends Array {}\n        var c = new C();\n        c[2] = 'foo';\n        c.length = 1;\n        return c.length === 1 && !(2 in c);\n      */",
  "subclassing›Array is subclassable›correct prototype chain": "/*\n        class C extends Array {}\n        var c = new C();\n        return c instanceof C && c instanceof Array && Object.getPrototypeOf(C) === Array;\n      */",
  "subclassing›Array is subclassable›Array.isArray support": "/*\n        class C extends Array {}\n        return Array.isArray(new C());\n      */",
  "subclassing›Array is subclassable›Array.prototype.concat": "/*\n        class C extends Array {}\n        var c = new C();\n        return c.concat(1) instanceof C;\n      */",
  "subclassing›Array is subclassable›Array.prototype.filter": "/*\n        class C extends Array {}\n        var c = new C();\n        return c.filter(Boolean) instanceof C;\n      */",
  "subclassing›Array is subclassable›Array.prototype.map": "/*\n        class C extends Array {}\n        var c = new C();\n        return c.map(Boolean) instanceof C;\n      */",
  "subclassing›Array is subclassable›Array.prototype.slice": "/*\n        class C extends Array {}\n        var c = new C();\n        c.push(2,4,6);\n        return c.slice(1,2) instanceof C;\n      */",
  "subclassing›Array is subclassable›Array.prototype.splice": "/*\n        class C extends Array {}\n        var c = new C();\n        c.push(2,4,6);\n        return c.splice(1,2) instanceof C;\n      */",
  "subclassing›Array is subclassable›Array.from": "/*\n        class C extends Array {}\n        return C.from({ length: 0 }) instanceof C;\n      */",
  "subclassing›Array is subclassable›Array.of": "/*\n        class C extends Array {}\n        return C.of(0) instanceof C;\n      */",
  "subclassing›RegExp is subclassable›basic functionality": "/*\n        class R extends RegExp {}\n        var r = new R(\"baz\",\"g\");\n        return r.global && r.source === \"baz\";\n      */",
  "subclassing›RegExp is subclassable›correct prototype chain": "/*\n        class R extends RegExp {}\n        var r = new R(\"baz\",\"g\");\n        return r instanceof R && r instanceof RegExp && Object.getPrototypeOf(R) === RegExp;\n      */",
  "subclassing›RegExp is subclassable›RegExp.prototype.exec": "/*\n        class R extends RegExp {}\n        var r = new R(\"baz\",\"g\");\n        return r.exec(\"foobarbaz\")[0] === \"baz\" && r.lastIndex === 9;\n      */",
  "subclassing›RegExp is subclassable›RegExp.prototype.test": "/*\n        class R extends RegExp {}\n        var r = new R(\"baz\");\n        return r.test(\"foobarbaz\");\n      */",
  "subclassing›Function is subclassable›can be called": "/*\n        class C extends Function {}\n        var c = new C(\"return 'foo';\");\n        return c() === 'foo';\n      */",
  "subclassing›Function is subclassable›correct prototype chain": "/*\n        class C extends Function {}\n        var c = new C(\"return 'foo';\");\n        return c instanceof C && c instanceof Function && Object.getPrototypeOf(C) === Function;\n      */",
  "subclassing›Function is subclassable›can be used with \"new\"": "/*\n        class C extends Function {}\n        var c = new C(\"this.bar = 2;\");\n        c.prototype.baz = 3;\n        return new c().bar === 2 && new c().baz === 3;\n      */",
  "subclassing›Function is subclassable›Function.prototype.call": "/*\n        class C extends Function {}\n        var c = new C(\"x\", \"return this.bar + x;\");\n        return c.call({bar:1}, 2) === 3;\n      */",
  "subclassing›Function is subclassable›Function.prototype.apply": "/*\n        class C extends Function {}\n        var c = new C(\"x\", \"return this.bar + x;\");\n        return c.apply({bar:1}, [2]) === 3;\n      */",
  "subclassing›Function is subclassable›Function.prototype.bind": "/*\n        class C extends Function {}\n        var c = new C(\"x\", \"y\", \"return this.bar + x + y;\").bind({bar:1}, 2);\n        return c(6) === 9 && c instanceof C;\n      */",
  "subclassing›Promise is subclassable›basic functionality": "/*\n        class P extends Promise {}\n        var p1 = new P(function(resolve, reject) { resolve(\"foo\"); });\n        var p2 = new P(function(resolve, reject) { reject(\"quux\"); });\n        var score = +(p1 instanceof P);\n\n        function thenFn(result)  { score += (result === \"foo\");  check(); }\n        function catchFn(result) { score += (result === \"quux\"); check(); }\n        function shouldNotRun(result)  { score = -Infinity;   }\n\n        p1.then(thenFn, shouldNotRun);\n        p2.then(shouldNotRun, catchFn);\n        p1.catch(shouldNotRun);\n        p2.catch(catchFn);\n\n        p1.then(function() {\n          // P.prototype.then() should return a new P\n          score += p1.then() instanceof P && p1.then() !== p1;\n          check();\n        });\n\n        function check() {\n          if (score === 5) asyncTestPassed();\n        }\n      */",
  "subclassing›Promise is subclassable›correct prototype chain": "/*\n        class C extends Promise {}\n        var c = new C(function(resolve, reject) { resolve(\"foo\"); });\n        return c instanceof C && c instanceof Promise && Object.getPrototypeOf(C) === Promise;\n      */",
  "subclassing›Promise is subclassable›Promise.all": "/*\n        class P extends Promise {}\n        var fulfills = P.all([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,100,\"bar\"); }),\n        ]);\n        var rejects = P.all([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 100,\"qux\"); }),\n        ]);\n        var score = +(fulfills instanceof P);\n        fulfills.then(function(result) { score += (result + \"\" === \"foo,bar\"); check(); });\n        rejects.catch(function(result) { score += (result === \"qux\"); check(); });\n\n        function check() {\n          if (score === 3) asyncTestPassed();\n        }\n      */",
  "subclassing›Promise is subclassable›Promise.race": "/*\n        class P extends Promise {}\n        var fulfills = P.race([\n          new Promise(function(resolve)   { setTimeout(resolve,200,\"foo\"); }),\n          new Promise(function(_, reject) { setTimeout(reject, 300,\"bar\"); }),\n        ]);\n        var rejects = P.race([\n          new Promise(function(_, reject) { setTimeout(reject, 200,\"baz\"); }),\n          new Promise(function(resolve)   { setTimeout(resolve,300,\"qux\"); }),\n        ]);\n        var score = +(fulfills instanceof P);\n        fulfills.then(function(result) { score += (result === \"foo\"); check(); });\n        rejects.catch(function(result) { score += (result === \"baz\"); check(); });\n\n        function check() {\n          if (score === 3) asyncTestPassed();\n        }\n      */",
  "subclassing›miscellaneous subclassables›Boolean is subclassable": "/*\n        class C extends Boolean {}\n        var c = new C(true);\n        return c instanceof Boolean\n          && c instanceof C\n          && c == true;\n      */",
  "subclassing›miscellaneous subclassables›Number is subclassable": "/*\n        class C extends Number {}\n        var c = new C(6);\n        return c instanceof Number\n          && c instanceof C\n          && +c === 6;\n      */",
  "subclassing›miscellaneous subclassables›String is subclassable": "/*\n        class C extends String {}\n        var c = new C(\"golly\");\n        return c instanceof String\n          && c instanceof C\n          && c + '' === \"golly\"\n          && c[0] === \"g\"\n          && c.length === 5;\n      */",
  "subclassing›miscellaneous subclassables›Map is subclassable": "/*\n        var key = {};\n        class M extends Map {}\n        var map = new M();\n\n        map.set(key, 123);\n\n        return map instanceof M && map.has(key) && map.get(key) === 123;\n      */",
  "subclassing›miscellaneous subclassables›Set is subclassable": "/*\n        var obj = {};\n        class S extends Set {}\n        var set = new S();\n\n        set.add(123);\n        set.add(123);\n\n        return set instanceof S && set.has(123);\n      */",
  "misc›prototype of bound functions›basic functions": "/*\n          function correctProtoBound(proto) {\nvar f = function(){};\nif (Object.setPrototypeOf) {\n  Object.setPrototypeOf(f, proto);\n}\nelse {\n  f.__proto__ = proto;\n}\nvar boundF = Function.prototype.bind.call(f, null);\nreturn Object.getPrototypeOf(boundF) === proto;\n          }\n          return correctProtoBound(Function.prototype)\n&& correctProtoBound({})\n&& correctProtoBound(null);\n      */",
  "misc›prototype of bound functions›generator functions": "/*\n          function correctProtoBound(proto) {\nvar f = function*(){};\nif (Object.setPrototypeOf) {\n  Object.setPrototypeOf(f, proto);\n}\nelse {\n  f.__proto__ = proto;\n}\nvar boundF = Function.prototype.bind.call(f, null);\nreturn Object.getPrototypeOf(boundF) === proto;\n          }\n          return correctProtoBound(Function.prototype)\n&& correctProtoBound({})\n&& correctProtoBound(null);\n      */",
  "misc›prototype of bound functions›arrow functions": "/*\n          function correctProtoBound(proto) {\nvar f = ()=>5;\nif (Object.setPrototypeOf) {\n  Object.setPrototypeOf(f, proto);\n}\nelse {\n  f.__proto__ = proto;\n}\nvar boundF = Function.prototype.bind.call(f, null);\nreturn Object.getPrototypeOf(boundF) === proto;\n          }\n          return correctProtoBound(Function.prototype)\n&& correctProtoBound({})\n&& correctProtoBound(null);\n      */",
  "misc›prototype of bound functions›classes": "/*\n          function correctProtoBound(proto) {\nclass C {}\nif (Object.setPrototypeOf) {\n  Object.setPrototypeOf(C, proto);\n}\nelse {\n  C.__proto__ = proto;\n}\nvar boundF = Function.prototype.bind.call(C, null);\nreturn Object.getPrototypeOf(boundF) === proto;\n          }\n          return correctProtoBound(Function.prototype)\n&& correctProtoBound({})\n&& correctProtoBound(null);\n      */",
  "misc›prototype of bound functions›subclasses": "/*\n          function correctProtoBound(superclass) {\nclass C extends superclass {\n  constructor() {\n    return Object.create(null);\n  }\n}\nvar boundF = Function.prototype.bind.call(C, null);\nreturn Object.getPrototypeOf(boundF) === Object.getPrototypeOf(C);\n          }\n          return correctProtoBound(function(){})\n&& correctProtoBound(Array)\n&& correctProtoBound(null);\n      */",
  "misc›Proxy, internal 'get' calls›ToPrimitive": "/*\n        // ToPrimitive -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({toString:Function()}, { get: function(o, k) { get.push(k); return o[k]; }});\n        p + 3;\n        return get[0] === Symbol.toPrimitive && get.slice(1) + '' === \"valueOf,toString\";\n      */",
  "misc›Proxy, internal 'get' calls›CreateListFromArrayLike": "/*\n        // CreateListFromArrayLike -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({length:2, 0:0, 1:0}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Function.prototype.apply({}, p);\n        return get + '' === \"length,0,1\";\n      */",
  "misc›Proxy, internal 'get' calls›instanceof operator": "/*\n        // InstanceofOperator -> GetMethod -> GetV -> [[Get]]\n        // InstanceofOperator -> OrdinaryHasInstance -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy(Function(), { get: function(o, k) { get.push(k); return o[k]; }});\n        ({}) instanceof p;\n        return get[0] === Symbol.hasInstance && get.slice(1) + '' === \"prototype\";\n      */",
  "misc›Proxy, internal 'get' calls›HasBinding": "/*\n        // HasBinding -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({foo:1}, { get: function(o, k) { get.push(k); return o[k]; }});\n        p[Symbol.unscopables] = p;\n        with(p) {\n          typeof foo;\n        }\n        return get[0] === Symbol.unscopables && get.slice(1) + '' === \"foo\";\n      */",
  "misc›Proxy, internal 'get' calls›CreateDynamicFunction": "/*\n        // CreateDynamicFunction -> GetPrototypeFromConstructor -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy(Function, { get: function(o, k) { get.push(k); return o[k]; }});\n        new p;\n        return get + '' === \"prototype\";\n      */",
  "misc›Proxy, internal 'get' calls›ClassDefinitionEvaluation": "/*\n        // ClassDefinitionEvaluation -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy(Function(), { get: function(o, k) { get.push(k); return o[k]; }});\n        class C extends p {}\n        return get + '' === \"prototype\";\n      */",
  "misc›Proxy, internal 'get' calls›IteratorComplete, IteratorValue": "/*\n        // IteratorComplete -> Get -> [[Get]]\n        // IteratorValue -> Get -> [[Get]]\n        var get = [];\n        var iterable = {};\n        iterable[Symbol.iterator] = function() {\n          return {\nnext: function() {\n  return new Proxy({ value: 2, done: false }, { get: function(o, k) { get.push(k); return o[k]; }});\n}\n          };\n        }\n        var i = 0;\n        for(var e of iterable) {\n          if (++i >= 2) break;\n        }\n        return get + '' === \"done,value,done,value\";\n      */",
  "misc›Proxy, internal 'get' calls›ToPropertyDescriptor": "/*\n        // ToPropertyDescriptor -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({\nenumerable: true, configurable: true, value: true,\nwritable: true, get: Function(), set: Function()\n          }, { get: function(o, k) { get.push(k); return o[k]; }});\n        try {\n          // This will throw, since it will have true for both \"get\" and \"value\",\n          // but not before performing a Get on every property.\n          Object.defineProperty({}, \"foo\", p);\n        } catch(e) {\n          return get + '' === \"enumerable,configurable,value,writable,get,set\";\n        }\n      */",
  "misc›Proxy, internal 'get' calls›Object.assign": "/*\n        // Object.assign -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({foo:1, bar:2}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Object.assign({}, p);\n        return get + '' === \"foo,bar\";\n      */",
  "misc›Proxy, internal 'get' calls›Object.defineProperties": "/*\n        // Object.defineProperties -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({foo:{}, bar:{}}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Object.defineProperties({}, p);\n        return get + '' === \"foo,bar\";\n      */",
  "misc›Proxy, internal 'get' calls›Function.prototype.bind": "/*\n        // Function.prototype.bind -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy(Function(), { get: function(o, k) { get.push(k); return o[k]; }});\n        Function.prototype.bind.call(p);\n        return get + '' === \"length,name\";\n      */",
  "misc›Proxy, internal 'get' calls›Error.prototype.toString": "/*\n        // Error.prototype.toString -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Error.prototype.toString.call(p);\n        return get + '' === \"name,message\";\n      */",
  "misc›Proxy, internal 'get' calls›String.raw": "/*\n        // String.raw -> Get -> [[Get]]\n        var get = [];\n        var raw = new Proxy({length: 2, 0: '', 1: ''}, { get: function(o, k) { get.push(k); return o[k]; }});\n        var p = new Proxy({raw: raw}, { get: function(o, k) { get.push(k); return o[k]; }});\n        String.raw(p);\n        return get + '' === \"raw,length,0,1\";\n      */",
  "misc›Proxy, internal 'get' calls›RegExp constructor": "/*\n        // RegExp -> Get -> [[Get]]\n        var get = [];\n        var re = { constructor: null };\n        re[Symbol.match] = true;\n        var p = new Proxy(re, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp(p);\n        return get[0] === Symbol.match && get.slice(1) + '' === \"constructor,source,flags\";\n      */",
  "misc›Proxy, internal 'get' calls›RegExp.prototype.flags": "/*\n        // RegExp.prototype.flags -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Object.getOwnPropertyDescriptor(RegExp.prototype, 'flags').get.call(p);\n        return get + '' === \"global,ignoreCase,multiline,unicode,sticky\";\n      */",
  "misc›Proxy, internal 'get' calls›RegExp.prototype.test": "/*\n        // RegExp.prototype.test -> RegExpExec -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({ exec: function() { return null; } }, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp.prototype.test.call(p);\n        return get + '' === \"exec\";\n      */",
  "misc›Proxy, internal 'get' calls›RegExp.prototype.toString": "/*\n        // RegExp.prototype.toString -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({}, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp.prototype.toString.call(p);\n        return get + '' === \"source,flags\";\n      */",
  "misc›Proxy, internal 'get' calls›RegExp.prototype[Symbol.match]": "/*\n        // RegExp.prototype[Symbol.match] -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({ exec: function() { return null; } }, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp.prototype[Symbol.match].call(p);\n        p.global = true;\n        RegExp.prototype[Symbol.match].call(p);\n        return get + '' === \"global,exec,global,unicode,exec\";\n      */",
  "misc›Proxy, internal 'get' calls›RegExp.prototype[Symbol.replace]": "/*\n        // RegExp.prototype[Symbol.replace] -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({ exec: function() { return null; } }, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp.prototype[Symbol.replace].call(p);\n        p.global = true;\n        RegExp.prototype[Symbol.replace].call(p);\n        return get + '' === \"global,exec,global,unicode,exec\";\n      */",
  "misc›Proxy, internal 'get' calls›RegExp.prototype[Symbol.search]": "/*\n        // RegExp.prototype[Symbol.search] -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({ exec: function() { return null; } }, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp.prototype[Symbol.search].call(p);\n        return get + '' === \"lastIndex,exec\";\n      */",
  "misc›Proxy, internal 'get' calls›RegExp.prototype[Symbol.split]": "/*\n        // RegExp.prototype[Symbol.split] -> Get -> [[Get]]\n        var get = [];\n        var constructor = Function();\n        constructor[Symbol.species] = Object;\n        var p = new Proxy({ constructor: constructor, flags: '', exec: function() { return null; } }, { get: function(o, k) { get.push(k); return o[k]; }});\n        RegExp.prototype[Symbol.split].call(p, \"\");\n        return get + '' === \"constructor,flags,exec\";\n      */",
  "misc›Proxy, internal 'get' calls›Array.from": "/*\n        // Array.from -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({length: 2, 0: '', 1: ''}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.from(p);\n        return get[0] === Symbol.iterator && get.slice(1) + '' === \"length,0,1\";\n      */",
  "misc›Proxy, internal 'get' calls›Array.prototype.concat": "/*\n        // Array.prototype.concat -> Get -> [[Get]]\n        var get = [];\n        var arr = [1];\n        arr.constructor = undefined;\n        var p = new Proxy(arr, { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.concat.call(p,p);\n        return get[0] === \"constructor\"\n          && get[1] === Symbol.isConcatSpreadable\n          && get[2] === \"length\"\n          && get[3] === \"0\"\n          && get[4] === get[1] && get[5] === get[2] && get[6] === get[3]\n          && get.length === 7;\n      */",
  "misc›Proxy, internal 'get' calls›Array.prototype iteration methods": "/*\n        // Array.prototype methods -> Get -> [[Get]]\n        var methods = ['copyWithin', 'every', 'fill', 'filter', 'find', 'findIndex', 'forEach',\n          'indexOf', 'join', 'lastIndexOf', 'map', 'reduce', 'reduceRight', 'some'];\n        var get;\n        var p = new Proxy({length: 2, 0: '', 1: ''}, { get: function(o, k) { get.push(k); return o[k]; }});\n        for(var i = 0; i < methods.length; i+=1) {\n          get = [];\n          Array.prototype[methods[i]].call(p, Function());\n          if (get + '' !== (\nmethods[i] === 'fill' ? \"length\" :\nmethods[i] === 'every' ? \"length,0\" :\nmethods[i] === 'lastIndexOf' || methods[i] === 'reduceRight' ? \"length,1,0\" :\n\"length,0,1\"\n          )) {\nreturn false;\n          }\n        }\n        return true;\n      */",
  "misc›Proxy, internal 'get' calls›Array.prototype.pop": "/*\n        // Array.prototype.pop -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy([0,1,2,3], { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.pop.call(p);\n        return get + '' === \"length,3\";\n      */",
  "misc›Proxy, internal 'get' calls›Array.prototype.reverse": "/*\n        // Array.prototype.reverse -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy([0,,2,,4,,], { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.reverse.call(p);\n        return get + '' === \"length,0,4,2\";\n      */",
  "misc›Proxy, internal 'get' calls›Array.prototype.shift": "/*\n        // Array.prototype.shift -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy([0,1,2,3], { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.shift.call(p);\n        return get + '' === \"length,0,1,2,3\";\n      */",
  "misc›Proxy, internal 'get' calls›Array.prototype.splice": "/*\n        // Array.prototype.splice -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy([0,1,2,3], { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.splice.call(p,1,1);\n        Array.prototype.splice.call(p,1,0,1);\n        return get + '' === \"length,constructor,1,2,3,length,constructor,2,1\";\n      */",
  "misc›Proxy, internal 'get' calls›Array.prototype.toString": "/*\n        // Array.prototype.toString -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({ join:Function() }, { get: function(o, k) { get.push(k); return o[k]; }});\n        Array.prototype.toString.call(p);\n        return get + '' === \"join\";\n      */",
  "misc›Proxy, internal 'get' calls›JSON.stringify": "/*\n        // JSON.stringify -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({}, { get: function(o, k) { get.push(k); return o[k]; }});\n        JSON.stringify(p);\n        return get + '' === \"toJSON\";\n      */",
  "misc›Proxy, internal 'get' calls›Promise resolve functions": "/*\n        // Promise resolve functions -> Get -> [[Get]]\n        var get = [];\n        var p = new Proxy({}, { get: function(o, k) { get.push(k); return o[k]; }});\n        new Promise(function(resolve){ resolve(p); });\n        return get + '' === \"then\";\n      */",
  "misc›Proxy, internal 'get' calls›String.prototype.match": "/*\n        // String.prototype.match -> Get -> [[Get]]\n        var get = [];\n        var proxied = {};\n        proxied[Symbol.toPrimitive] = Function();\n        var p = new Proxy(proxied, { get: function(o, k) { get.push(k); return o[k]; }});\n        \"\".match(p);\n        return get[0] === Symbol.match && get[1] === Symbol.toPrimitive && get.length === 2;\n      */",
  "misc›Proxy, internal 'get' calls›String.prototype.replace": "/*\n        // String.prototype.replace functions -> Get -> [[Get]]\n        var get = [];\n        var proxied = {};\n        proxied[Symbol.toPrimitive] = Function();\n        var p = new Proxy(proxied, { get: function(o, k) { get.push(k); return o[k]; }});\n        \"\".replace(p);\n        return get[0] === Symbol.replace && get[1] === Symbol.toPrimitive && get.length === 2;\n      */",
  "misc›Proxy, internal 'get' calls›String.prototype.search": "/*\n        // String.prototype.search functions -> Get -> [[Get]]\n        var get = [];\n        var proxied = {};\n        proxied[Symbol.toPrimitive] = Function();\n        var p = new Proxy(proxied, { get: function(o, k) { get.push(k); return o[k]; }});\n        \"\".search(p);\n        return get[0] === Symbol.search && get[1] === Symbol.toPrimitive && get.length === 2;\n      */",
  "misc›Proxy, internal 'get' calls›String.prototype.split": "/*\n        // String.prototype.split functions -> Get -> [[Get]]\n        var get = [];\n        var proxied = {};\n        proxied[Symbol.toPrimitive] = Function();\n        var p = new Proxy(proxied, { get: function(o, k) { get.push(k); return o[k]; }});\n        \"\".split(p);\n        return get[0] === Symbol.split && get[1] === Symbol.toPrimitive && get.length === 2;\n      */",
  "misc›Proxy, internal 'get' calls›Date.prototype.toJSON": "/*\n        // Date.prototype.toJSON -> ToPrimitive -> Get -> [[Get]]\n        // Date.prototype.toJSON -> Invoke -> GetMethod -> GetV -> [[Get]]\n        var get = [];\n        var p = new Proxy({toString:Function(),toISOString:Function()}, { get: function(o, k) { get.push(k); return o[k]; }});\n        Date.prototype.toJSON.call(p);\n        return get[0] === Symbol.toPrimitive && get.slice(1) + '' === \"valueOf,toString,toISOString\";\n      */",
  "misc›Proxy, internal 'set' calls›Object.assign": "/*\n        // Object.assign -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy({}, { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        Object.assign(p, { foo: 1, bar: 2 });\n        return set + '' === \"foo,bar\";\n      */",
  "misc›Proxy, internal 'set' calls›Array.from": "/*\n        // Array.from -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy({}, { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        Array.from.call(function(){ return p; }, {length:2, 0:1, 1:2});\n        return set + '' === \"length\";\n      */",
  "misc›Proxy, internal 'set' calls›Array.of": "/*\n        // Array.from -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy({}, { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        Array.of.call(function(){ return p; }, 1, 2, 3);\n        return set + '' === \"length\";\n      */",
  "misc›Proxy, internal 'set' calls›Array.prototype.copyWithin": "/*\n        // Array.prototype.copyWithin -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([1,2,3,4,5,6], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.copyWithin(0, 3);\n        return set + '' === \"0,1,2\";\n      */",
  "misc›Proxy, internal 'set' calls›Array.prototype.fill": "/*\n        // Array.prototype.fill -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([1,2,3,4,5,6], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.fill(0, 3);\n        return set + '' === \"3,4,5\";\n      */",
  "misc›Proxy, internal 'set' calls›Array.prototype.pop": "/*\n        // Array.prototype.pop -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.pop();\n        return set + '' === \"length\";\n      */",
  "misc›Proxy, internal 'set' calls›Array.prototype.push": "/*\n        // Array.prototype.push -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.push(0,0,0);\n        return set + '' === \"0,1,2,length\";\n      */",
  "misc›Proxy, internal 'set' calls›Array.prototype.reverse": "/*\n        // Array.prototype.reverse -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([0,0,0,,], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.reverse();\n        return set + '' === \"3,1,2\";\n      */",
  "misc›Proxy, internal 'set' calls›Array.prototype.shift": "/*\n        // Array.prototype.shift -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([0,0,,0], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.shift();\n        return set + '' === \"0,2,length\";\n      */",
  "misc›Proxy, internal 'set' calls›Array.prototype.splice": "/*\n        // Array.prototype.splice -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([1,2,3], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.splice(1,0,0);\n        return set + '' === \"3,2,1,length\";\n      */",
  "misc›Proxy, internal 'set' calls›Array.prototype.unshift": "/*\n        // Array.prototype.unshift -> Set -> [[Set]]\n        var set = [];\n        var p = new Proxy([0,0,,0], { set: function(o, k, v) { set.push(k); o[k] = v; return true; }});\n        p.unshift(0,1);\n        return set + '' === \"5,3,2,0,1,length\";\n      */",
  "misc›Proxy, internal 'defineProperty' calls›[[Set]]": "/*\n        // [[Set]] -> [[DefineOwnProperty]]\n        var def = [];\n        var p = new Proxy({foo:1, bar:2}, { defineProperty: function(o, v, desc) { def.push(v); Object.defineProperty(o, v, desc); return true; }});\n        p.foo = 2; p.bar = 4;\n        return def + '' === \"foo,bar\";\n      */",
  "misc›Proxy, internal 'defineProperty' calls›SetIntegrityLevel": "/*\n        // SetIntegrityLevel -> DefinePropertyOrThrow -> [[DefineOwnProperty]]\n        var def = [];\n        var p = new Proxy({foo:1, bar:2}, { defineProperty: function(o, v, desc) { def.push(v); Object.defineProperty(o, v, desc); return true; }});\n        Object.freeze(p);\n        return def + '' === \"foo,bar\";\n      */",
  "misc›Proxy, internal 'deleteProperty' calls›Array.prototype.copyWithin": "/*\n        // Array.prototype.copyWithin -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,0,0,,,,], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.copyWithin(0,3);\n        return del + '' === \"0,1,2\";\n      */",
  "misc›Proxy, internal 'deleteProperty' calls›Array.prototype.pop": "/*\n        // Array.prototype.pop -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,0,0], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.pop();\n        return del + '' === \"2\";\n      */",
  "misc›Proxy, internal 'deleteProperty' calls›Array.prototype.reverse": "/*\n        // Array.prototype.reverse -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,,2,,4,,], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.reverse();\n        return del + '' === \"0,4,2\";\n      */",
  "misc›Proxy, internal 'deleteProperty' calls›Array.prototype.shift": "/*\n        // Array.prototype.shift -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,,0,,0,0], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.shift();\n        return del + '' === \"0,2,5\";\n      */",
  "misc›Proxy, internal 'deleteProperty' calls›Array.prototype.splice": "/*\n        // Array.prototype.splice -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,0,0,0,,0], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.splice(2,2,0);\n        return del + '' === \"3,5\";\n      */",
  "misc›Proxy, internal 'deleteProperty' calls›Array.prototype.unshift": "/*\n        // Array.prototype.unshift -> DeletePropertyOrThrow -> [[Delete]]\n        var del = [];\n        var p = new Proxy([0,0,,0,,0], { deleteProperty: function(o, v) { del.push(v); return delete o[v]; }});\n        p.unshift(0);\n        return del + '' === \"5,3\";\n      */",
  "misc›Proxy, internal 'getOwnPropertyDescriptor' calls›[[Set]]": "/*\n        // [[Set]] -> [[GetOwnProperty]]\n        var gopd = [];\n        var p = new Proxy({},\n          { getOwnPropertyDescriptor: function(o, v) { gopd.push(v); return Object.getOwnPropertyDescriptor(o, v); }});\n        p.foo = 1; p.bar = 1;\n        return gopd + '' === \"foo,bar\";\n      */",
  "misc›Proxy, internal 'getOwnPropertyDescriptor' calls›Object.assign": "/*\n        // Object.assign -> [[GetOwnProperty]]\n        var gopd = [];\n        var p = new Proxy({foo:1, bar:2},\n          { getOwnPropertyDescriptor: function(o, v) { gopd.push(v); return Object.getOwnPropertyDescriptor(o, v); }});\n        Object.assign({}, p);\n        return gopd + '' === \"foo,bar\";\n      */",
  "misc›Proxy, internal 'getOwnPropertyDescriptor' calls›Object.prototype.hasOwnProperty": "/*\n        // Object.prototype.hasOwnProperty -> HasOwnProperty -> [[GetOwnProperty]]\n        var gopd = [];\n        var p = new Proxy({foo:1, bar:2},\n          { getOwnPropertyDescriptor: function(o, v) { gopd.push(v); return Object.getOwnPropertyDescriptor(o, v); }});\n        p.hasOwnProperty('garply');\n        return gopd + '' === \"garply\";\n      */",
  "misc›Proxy, internal 'getOwnPropertyDescriptor' calls›Function.prototype.bind": "/*\n        // Function.prototype.bind -> HasOwnProperty -> [[GetOwnProperty]]\n        var gopd = [];\n        var p = new Proxy(Function(),\n          { getOwnPropertyDescriptor: function(o, v) { gopd.push(v); return Object.getOwnPropertyDescriptor(o, v); }});\n        p.bind();\n        return gopd + '' === \"length\";\n      */",
  "misc›Proxy, internal 'ownKeys' calls›SetIntegrityLevel": "/*\n        // SetIntegrityLevel -> [[OwnPropertyKeys]]\n        var ownKeysCalled = 0;\n        var p = new Proxy({}, { ownKeys: function(o) { ownKeysCalled++; return Object.keys(o); }});\n        Object.freeze(p);\n        return ownKeysCalled === 1;\n      */",
  "misc›Proxy, internal 'ownKeys' calls›TestIntegrityLevel": "/*\n        // TestIntegrityLevel -> [[OwnPropertyKeys]]\n        var ownKeysCalled = 0;\n        var p = new Proxy(Object.preventExtensions({}), { ownKeys: function(o) { ownKeysCalled++; return Object.keys(o); }});\n        Object.isFrozen(p);\n        return ownKeysCalled === 1;\n      */",
  "misc›Proxy, internal 'ownKeys' calls›SerializeJSONObject": "/*\n        // SerializeJSONObject -> EnumerableOwnNames -> [[OwnPropertyKeys]]\n        var ownKeysCalled = 0;\n        var p = new Proxy({}, { ownKeys: function(o) { ownKeysCalled++; return Object.keys(o); }});\n        JSON.stringify({a:p,b:p});\n        return ownKeysCalled === 2;\n      */",
  "misc›Object static methods accept primitives›Object.getPrototypeOf": "/*\n        return Object.getPrototypeOf('a').constructor === String;\n      */",
  "misc›Object static methods accept primitives›Object.getOwnPropertyDescriptor": "/*\n        return Object.getOwnPropertyDescriptor('a', 'foo') === undefined;\n      */",
  "misc›Object static methods accept primitives›Object.getOwnPropertyNames": "/*\n        var s = Object.getOwnPropertyNames('a');\n        return s.length === 2 &&\n          ((s[0] === 'length' && s[1] === '0') || (s[0] === '0' && s[1] === 'length'));\n      */",
  "misc›Object static methods accept primitives›Object.seal": "/*\n        return Object.seal('a') === 'a';\n      */",
  "misc›Object static methods accept primitives›Object.freeze": "/*\n        return Object.freeze('a') === 'a';\n      */",
  "misc›Object static methods accept primitives›Object.preventExtensions": "/*\n        return Object.preventExtensions('a') === 'a';\n      */",
  "misc›Object static methods accept primitives›Object.isSealed": "/*\n        return Object.isSealed('a') === true;\n      */",
  "misc›Object static methods accept primitives›Object.isFrozen": "/*\n        return Object.isFrozen('a') === true;\n      */",
  "misc›Object static methods accept primitives›Object.isExtensible": "/*\n        return Object.isExtensible('a') === false;\n      */",
  "misc›Object static methods accept primitives›Object.keys": "/*\n        var s = Object.keys('a');\n        return s.length === 1 && s[0] === '0';\n      */",
  "misc›own property order›Object.keys": "/*\n        var obj = {\n          // Non-negative integer names appear first in value order\n          2:    true,\n          0:    true,\n          1:    true,\n          // Other string names appear in source order\n          ' ':  true,\n          // Non-negative integers are sorted above other names\n          9:    true,\n          D:    true,\n          B:    true,\n          // Negative integers are treated as other names\n          '-1': true,\n        };\n        // Other string names are added in order of creation\n        obj.A = true;\n        // Non-negative integer names, conversely, ignore order of creation\n        obj[3] = true;\n        // Having a total of 20+ properties doesn't affect property order\n        \"EFGHIJKLMNOPQRSTUVWXYZ\".split('').forEach(function(key){\n          obj[key] = true;\n        });\n        // Object.defineProperty doesn't affect the above rules\n        Object.defineProperty(obj, 'C', { value: true, enumerable: true });\n        Object.defineProperty(obj, '4', { value: true, enumerable: true });\n        // Deleting and reinserting a property doesn't preserve its position\n        delete obj[2];\n        obj[2] = true;\n\n        var forInOrder = '';\n        for(var key in obj)forInOrder += key;\n\n        return Object.keys(obj).join('') === forInOrder;\n      */",
  "misc›own property order›Object.getOwnPropertyNames": "/*\n        var obj = {\n          2:    true,\n          0:    true,\n          1:    true,\n          ' ':  true,\n          9:    true,\n          D:    true,\n          B:    true,\n          '-1': true\n        };\n        obj.A = true;\n        obj[3] = true;\n        \"EFGHIJKLMNOPQRSTUVWXYZ\".split('').forEach(function(key){\n          obj[key] = true;\n        });\n        Object.defineProperty(obj, 'C', { value: true, enumerable: true });\n        Object.defineProperty(obj, '4', { value: true, enumerable: true });\n        delete obj[2];\n        obj[2] = true;\n\n        return Object.getOwnPropertyNames(obj).join('') === \"012349 DB-1AEFGHIJKLMNOPQRSTUVWXYZC\";\n      */",
  "misc›own property order›Object.assign": "/*\n        var result = '';\n        var target = {};\n\n        \"012349 DBACEFGHIJKLMNOPQRST\".split('').concat(-1).forEach(function(key){\n          Object.defineProperty(target, key, {\nset: function(){\n  result += key;\n}\n          })\n        });\n\n        var obj = {2: 2, 0: 0, 1: 1, ' ': ' ', 9: 9, D: 'D', B: 'B', '-1': '-1'};\n        Object.defineProperty(obj, 'A', {value: 'A',  enumerable: true});\n        Object.defineProperty(obj, '3', {value: '3',  enumerable: true});\n        Object.defineProperty(obj, 'C', {value: 'C',  enumerable: true});\n        Object.defineProperty(obj, '4', {value: '4',  enumerable: true});\n        delete obj[2];\n        obj[2] = true;\n\n        \"EFGHIJKLMNOPQRST\".split('').forEach(function(key){\n          obj[key] = key;\n        });\n\n        Object.assign(target, obj);\n\n        return result === \"012349 DB-1ACEFGHIJKLMNOPQRST\";\n      */",
  "misc›own property order›JSON.stringify": "/*\n        var obj = {\n          2:    true,\n          0:    true,\n          1:    true,\n          ' ':  true,\n          9:    true,\n          D:    true,\n          B:    true,\n          '-1': true\n        };\n        obj.A = true;\n        obj[3] = true;\n        \"EFGHIJKLMNOPQRSTUVWXYZ\".split('').forEach(function(key){\n          obj[key] = true;\n        });\n        Object.defineProperty(obj, 'C', { value: true, enumerable: true });\n        Object.defineProperty(obj, '4', { value: true, enumerable: true });\n        delete obj[2];\n        obj[2] = true;\n\n        return JSON.stringify(obj) ===\n          '{\"0\":true,\"1\":true,\"2\":true,\"3\":true,\"4\":true,\"9\":true,\" \":true,\"D\":true,\"B\":true,\"-1\":true,\"A\":true,\"E\":true,\"F\":true,\"G\":true,\"H\":true,\"I\":true,\"J\":true,\"K\":true,\"L\":true,\"M\":true,\"N\":true,\"O\":true,\"P\":true,\"Q\":true,\"R\":true,\"S\":true,\"T\":true,\"U\":true,\"V\":true,\"W\":true,\"X\":true,\"Y\":true,\"Z\":true,\"C\":true}';\n      */",
  "misc›own property order›JSON.parse": "/*\n        var result = '';\n        JSON.parse(\n          '{\"0\":true,\"1\":true,\"2\":true,\"3\":true,\"4\":true,\"9\":true,\" \":true,\"D\":true,\"B\":true,\"-1\":true,\"E\":true,\"F\":true,\"G\":true,\"H\":true,\"I\":true,\"J\":true,\"K\":true,\"L\":true,\"A\":true,\"C\":true}',\n          function reviver(k,v) {\nresult += k;\nreturn v;\n          }\n        );\n        return result === \"012349 DB-1EFGHIJKLAC\";\n      */",
  "misc›own property order›Reflect.ownKeys, string key order": "/*\n        var obj = {\n          2:    true,\n          0:    true,\n          1:    true,\n          ' ':  true,\n          9:    true,\n          D:    true,\n          B:    true,\n          '-1': true\n        };\n        obj.A = true;\n        obj[3] = true;\n        \"EFGHIJKLMNOPQRSTUVWXYZ\".split('').forEach(function(key){\n          obj[key] = true;\n        });\n        Object.defineProperty(obj, 'C', { value: true, enumerable: true });\n        Object.defineProperty(obj, '4', { value: true, enumerable: true });\n        delete obj[2];\n        obj[2] = true;\n\n        return Reflect.ownKeys(obj).join('') === \"012349 DB-1AEFGHIJKLMNOPQRSTUVWXYZC\";\n      */",
  "misc›own property order›Reflect.ownKeys, symbol key order": "/*\n        var sym1 = Symbol(), sym2 = Symbol(), sym3 = Symbol();\n        var obj = {\n          1:    true,\n          A:    true,\n        };\n        obj.B = true;\n        obj[sym1] = true;\n        obj[2] = true;\n        obj[sym2] = true;\n        Object.defineProperty(obj, 'C', { value: true, enumerable: true });\n        Object.defineProperty(obj, sym3,{ value: true, enumerable: true });\n        Object.defineProperty(obj, 'D', { value: true, enumerable: true });\n\n        var result = Reflect.ownKeys(obj);\n        var l = result.length;\n        return result[l-3] === sym1 && result[l-2] === sym2 && result[l-1] === sym3;\n      */",
  "misc›miscellaneous›no escaped reserved words as identifiers": "/*\n        var \\u0061;\n        try {\n          eval('var v\\\\u0061r');\n        } catch(e) {\n          return true;\n        }\n      */",
  "misc›miscellaneous›duplicate property names in strict mode": "/*\n        'use strict';\n        return this === undefined && ({ a:1, a:1 }).a === 1;\n      */",
  "misc›miscellaneous›no semicolon needed after do-while": "/*\n        do {} while (false) return true;\n      */",
  "misc›miscellaneous›no assignments allowed in for-in head": "/*\n        try {\n          eval('for (var i = 0 in {}) {}');\n        }\n        catch(e) {\n          return true;\n        }\n      */",
  "misc›miscellaneous›accessors aren't constructors": "/*\n        try {\n          new (Object.getOwnPropertyDescriptor({get a(){}}, 'a')).get;\n        } catch(e) {\n          return true;\n        }\n      */",
  "misc›miscellaneous›Invalid Date": "/*\n        return new Date(NaN) + \"\" === \"Invalid Date\";\n      */",
  "misc›miscellaneous›RegExp constructor can alter flags": "/*\n        return new RegExp(/./im, \"g\").global === true;\n      */",
  "misc›miscellaneous›RegExp.prototype.toString generic and uses \"flags\" property": "/*\n        return RegExp.prototype.toString.call({source: 'foo', flags: 'bar'}) === '/foo/bar';\n      */",
  "misc›miscellaneous›built-in prototypes are not instances": "/*\n        try {\n          RegExp.prototype.exec(); return false;\n        } catch(e) {}\n        try {\n          Date.prototype.valueOf(); return false;\n        } catch(e) {}\n\n        if (![Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError].every(function (E) {\nreturn Object.prototype.toString.call(E.prototype) === '[object Object]';\n        })) {\n          return false;\n        }\n\n        return true;\n      */",
  "misc›miscellaneous›function 'length' is configurable": "/*\n        var fn = function(a, b) {};\n\n        var desc = Object.getOwnPropertyDescriptor(fn, \"length\");\n        if (desc.configurable) {\n          Object.defineProperty(fn, \"length\", { value: 1 });\n          return fn.length === 1;\n        }\n\n        return false;\n      */",
  "annex b›non-strict function semantics›hoisted block-level function declaration": "/*\n        // Note: only available outside of strict mode.\n        if (!this) return false;\n        var passed = f() === 1;\n        function f() { return 1; }\n\n        passed &= typeof g === 'undefined';\n        { function g() { return 1; } }\n        passed &= g() === 1;\n\n        passed &= h() === 2;\n        { function h() { return 1; } }\n        function h() { return 2; }\n        passed &= h() === 1;\n\n        return passed;\n      */",
  "annex b›non-strict function semantics›labeled function statements": "/*\n        // Note: only available outside of strict mode.\n        if (!this) return false;\n\n        label: function foo() { return 2; }\n        return foo() === 2;\n      */",
  "annex b›non-strict function semantics›function statements in if-statement clauses": "/*\n        // Note: only available outside of strict mode.\n        if (!this) return false;\n\n        if(true) function foo() { return 2; }\n        if(false) {} else function bar() { return 3; }\n        if(true) function baz() { return 4; } else {}\n        if(false) function qux() { return 5; } else function qux() { return 6; }\n        return foo() === 2 && bar() === 3 && baz() === 4 && qux() === 6;\n      */",
  "annex b›__proto__ in object literals›basic support": "/*\n        return { __proto__ : [] } instanceof Array\n          && !({ __proto__ : null } instanceof Object);\n      */",
  "annex b›__proto__ in object literals›multiple __proto__ is an error": "/*\n        try {\n          eval(\"({ __proto__ : [], __proto__: {} })\");\n        }\n        catch(e) {\n          return true;\n        }\n      */",
  "annex b›__proto__ in object literals›not a computed property": "/*\n        if (!({ __proto__ : [] } instanceof Array)) {\n          return false;\n        }\n        var a = \"__proto__\";\n        return !({ [a] : [] } instanceof Array);\n      */",
  "annex b›__proto__ in object literals›not a shorthand property": "/*\n        if (!({ __proto__ : [] } instanceof Array)) {\n          return false;\n        }\n        var __proto__ = [];\n        return !({ __proto__ } instanceof Array);\n      */",
  "annex b›__proto__ in object literals›not a shorthand method": "/*\n        if (!({ __proto__ : [] } instanceof Array)) {\n          return false;\n        }\n        return !({ __proto__(){} } instanceof Function);\n      */",
  "annex b›Object.prototype.__proto__›get prototype": "/*\n        var A = function(){};\n        return (new A()).__proto__ === A.prototype;\n      */",
  "annex b›Object.prototype.__proto__›set prototype": "/*\n        var o = {};\n        o.__proto__ = Array.prototype;\n        return o instanceof Array;\n      */",
  "annex b›Object.prototype.__proto__›absent from Object.create(null)": "/*\n        var o = Object.create(null), p = {};\n        o.__proto__ = p;\n        return Object.getPrototypeOf(o) !== p;\n      */",
  "annex b›Object.prototype.__proto__›present in hasOwnProperty()": "/*\n        return Object.prototype.hasOwnProperty('__proto__');\n      */",
  "annex b›Object.prototype.__proto__›correct property descriptor": "/*\n        var desc = Object.getOwnPropertyDescriptor(Object.prototype,\"__proto__\");\n        var A = function(){};\n\n        return (desc\n          && \"get\" in desc\n          && \"set\" in desc\n          && desc.configurable\n          && !desc.enumerable);\n      */",
  "annex b›Object.prototype.__proto__›present in Object.getOwnPropertyNames()": "/*\n        return Object.getOwnPropertyNames(Object.prototype).indexOf('__proto__') > -1;\n      */",
  "annex b›String.prototype HTML methods›existence": "/*\n        var i, names = [\"anchor\", \"big\", \"bold\", \"fixed\", \"fontcolor\", \"fontsize\",\n          \"italics\", \"link\", \"small\", \"strike\", \"sub\", \"sup\"];\n        for (i = 0; i < names.length; i++) {\n          if (typeof String.prototype[names[i]] !== 'function') {\nreturn false;\n          }\n        }\n        return true;\n      */",
  "annex b›String.prototype HTML methods›tags' names are lowercase": "/*\n        var i, names = [\"anchor\", \"big\", \"bold\", \"fixed\", \"fontcolor\", \"fontsize\",\n          \"italics\", \"link\", \"small\", \"strike\", \"sub\", \"sup\"];\n        for (i = 0; i < names.length; i++) {\n          if (\"\"[names[i]]().toLowerCase() !== \"\"[names[i]]()) {\nreturn false;\n          }\n        }\n        return true;\n      */",
  "annex b›String.prototype HTML methods›quotes in arguments are escaped": "/*\n        var i, names = [\"anchor\", \"fontcolor\", \"fontsize\", \"link\"];\n        for (i = 0; i < names.length; i++) {\n          if (\"\"[names[i]]('\"') !== \"\"[names[i]]('&' + 'quot;')) {\nreturn false;\n          }\n        }\n        return true;\n      */",
  "annex b›RegExp.prototype.compile": "/*\n    return typeof RegExp.prototype.compile === 'function';\n  */",
  "annex b›RegExp syntax extensions›hyphens in character sets": "/*\n        return /[\\w-_]/.exec(\"-\")[0] === \"-\";\n      */",
  "annex b›RegExp syntax extensions›invalid character escapes": "/*\n        return /\\z/.exec(\"\\\\z\")[0] === \"z\"\n          && /[\\z]/.exec(\"[\\\\z]\")[0] === \"z\";\n      */",
  "annex b›RegExp syntax extensions›invalid control-character escapes": "/*\n        return /\\c2/.exec(\"\\\\c2\")[0] === \"\\\\c2\";\n      */",
  "annex b›RegExp syntax extensions›invalid Unicode escapes": "/*\n        return /\\u1/.exec(\"u1\")[0] === \"u1\"\n          && /[\\u1]/.exec(\"u\")[0] === \"u\";\n      */",
  "annex b›RegExp syntax extensions›invalid hexadecimal escapes": "/*\n        return /\\x1/.exec(\"x1\")[0] === \"x1\"\n          && /[\\x1]/.exec(\"x\")[0] === \"x\";\n      */",
  "annex b›RegExp syntax extensions›incomplete patterns and quantifiers": "/*\n        return /x{1/.exec(\"x{1\")[0] === \"x{1\"\n          && /x]1/.exec(\"x]1\")[0] === \"x]1\";\n      */",
  "annex b›RegExp syntax extensions›octal escape sequences": "/*\n        return /\\041/.exec(\"!\")[0] === \"!\"\n          && /[\\041]/.exec(\"!\")[0] === \"!\";\n      */",
  "annex b›RegExp syntax extensions›invalid backreferences become octal escapes": "/*\n        return /\\41/.exec(\"!\")[0] === \"!\"\n          && /[\\41]/.exec(\"!\")[0] === \"!\";\n      */",
  "annex b›HTML-style comments": "/*\n    --> A comment\n    <!-- Another comment\n    var a = 3; <!-- Another comment\n    return a === 3;\n  */"
}
